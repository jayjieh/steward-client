{"version":3,"sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/wrappers/mlk-dynamic-control.ts","ng://steward-client/lib/mlk-datatable/mlk-datatable.component.ts","ng://steward-client/lib/steward-client.module.ts"],"names":["ResponseWrapper","StewardConfig","StewardClientService","http","config","this","base_url","headers","HttpHeaders","Content-Type","access_token","console","debug","append","prototype","post","endpoint","data","JSON","stringify","pipe","catchError","handleError","put","delete","request","body","get","options","params","getHttpParams","getFile","token","postFormData","formData","FormData","Object","keys","forEach","key","Authorization","postFormDataMultipart","Array","isArray","k2","putFormDataMultiPart","undefined","HttpParams","httpParams","value","error","res","status","code","message","of","renderMore","id","intiateDataTable","Injectable","HttpClient","StewardClientComponent","ngOnInit","Component","args","selector","template","styles","Page","Sort","MlkDynamicControl","label","name","controlType","icon","isRequired","placeholder","MlkInput","type","minLength","min","maxLength","max","MlkTextarea","cols","rows","MlkSelect","MlkSelectOption","text","MlkDatatableComponent","sterwardService","EventEmitter","group","filterComponents","comp","validators","push","Validators","required","FormControl","filterForm","FormGroup","loadPage","offset","limit","page","size","onActionClick","event","onActionsEvent","emit","pageInfo","filters","_this","Map","set","subscribe","response","onSelect","onActivate","updateFilter","processFilter","form","f","entries","touched","number","isInput","control","isSelect","isTextArea","getFormattedDate","date","year","getFullYear","month","getMonth","toString","length","day","getDate","Input","Output","ViewChild","DatatableComponent","MlkMoreActions","actions","idFieldName","StewardClientModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","FormsModule","ReactiveFormsModule","NgxDatatableModule","CommonModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * Wraps server response\r\n */\r\nexport class ResponseWrapper<T> {\r\n    /**\r\n     * Http status code e.g. 200\r\n     */\r\n    code: number;\r\n    /**\r\n     * Server message\r\n     */\r\n    message: string;\r\n    /**\r\n     * Actual response data\r\n     */\r\n    data: T;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpErrorResponse, HttpParams} from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport {catchError, map, tap} from 'rxjs/operators';\nimport { ResponseWrapper } from './entities/wrappers/response-wrapper';\n\nexport class StewardConfig{\n  base_url: string;\n  access_token?: string;\n}\n\n@Injectable()\nexport class StewardClientService<T, E> {\n\n  private headers: HttpHeaders;\n    token: string;\n    base_url: string = \"/\";\n\n    constructor(private http: HttpClient, config: StewardConfig) {\n        this.base_url = config.base_url;\n        this.headers = new HttpHeaders({\n            'Content-Type': 'application/json; charset=utf-8'\n        });\n        if(config.access_token){//append access token if the environment has access token\n            console.debug(\"Found access token\", config.access_token);\n            this.headers = this.headers.append('Authorization', \"Bearer \" + config.access_token);\n        } \n    }\n    /**\n     * Used to handle http post requests\n     */\n    post(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.post(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    /**\n     * Used to handle http post requests\n     */\n    put(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.put(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    delete(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.request('delete', this.base_url + endpoint, {headers: this.headers, body: JSON.stringify(data)}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    get(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n        const options = {\n            headers: this.headers,\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n\n    getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n        const options = {\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint + '?access_token=' + this.token, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    postFormData(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            formData.append(key, data[key]);\n        });\n        return this.http.post(this.base_url + endpoint, formData, {headers: new HttpHeaders({'Authorization': 'Bearer ' + this.token})}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            if (Array.isArray(data[key])) {\n                data[key].forEach(k2 => {\n                    formData.append(key, k2);\n                });\n            } else {\n                formData.append(key, data[key]);\n            }\n        });\n        return this.http.post(this.base_url + endpoint, formData, {headers: new HttpHeaders({'Authorization': 'Bearer ' + this.token})}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            if (Array.isArray(data[key])) {\n                data[key].forEach(k2 => {\n                    formData.append(key, k2);\n                });\n            } else {\n                formData.append(key, data[key]);\n            }\n        });\n        return this.http.put(this.base_url + endpoint, formData, {headers: new HttpHeaders({'Authorization': 'Bearer ' + this.token})}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    private getHttpParams(data: Map<string, string>): HttpParams {\n        if (data == undefined) {\n            return new HttpParams();\n        }\n        let httpParams: HttpParams = new HttpParams();\n        data.forEach((value: string, key: string) => {\n            httpParams = httpParams.append(key, value);\n        });\n        return httpParams;\n    }\n    /**\n     * Used to catch exception thrown by http client returns internal server error\n     * if status 500 is encountered\n     */\n    private handleError<ResponseWrapper>() {\n        return (error: HttpErrorResponse): Observable<any> => {\n            const res = new ResponseWrapper();\n            //            console.error(error); // log to console instead\n            if (error.status == 500) {\n                res.code = error.status;\n                res.message = 'Sorry internal server error occured please try again later';\n            } else {\n                res.code = error.status;\n                res.message = error.error.message;\n                res.data = error.error.data;\n            }\n            return of(res);\n        };\n    }\n    /**\n     * Used to render action buttons\n     */\n    static renderMore(id: any) {\n        return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\n    }\n\n    public intiateDataTable(endpoint: string, data?: Map<string, string>){\n        const options = {\n            headers: this.headers,\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'stw-steward-client',\n  template: `\n    <p>\n      steward-client works!\n    </p>\n  `,\n  styles: []\n})\nexport class StewardClientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/**\r\n * Datable page used to wrapper server content response\r\n */\r\nexport class Page<T> {\r\n    /**\r\n     * Number of items per page same as limit\r\n     */\r\n    size: number = 10;\r\n    /**\r\n     * Total items available on the server\r\n     */\r\n    totalElements: number = 0;\r\n    /**\r\n     * Total number of pages present\r\n     */\r\n    totalPages: number = 0;\r\n    /**\r\n     * Checks if is the first page\r\n     */\r\n    first: boolean = true;\r\n    /**\r\n     * Checks if it is the last page\r\n     */\r\n    last: boolean = false;\r\n    /**\r\n     * The actual page content\r\n     */\r\n    content: Array<T> = [];\r\n    /**\r\n     * Used to map sort parameters\r\n     */\r\n    sorted: Sort = new Sort();\r\n    /**\r\n     * Current page number\r\n     */\r\n    number: number = 0;\r\n}\r\n/**\r\n * used to map sort request\r\n */\r\nexport class Sort{\r\n    sorted: boolean = false;\r\n    unsorted: boolean = true;\r\n}\r\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class MlkDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (MlkInput, MlkTextArea & MlkSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = true, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class MlkInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string = \"text\";\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class MlkTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class MlkSelect {\n    /**\n     * Select options\n     */\n    options: Array<MlkSelectOption>;\n\n    constructor(options: Array<MlkSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class MlkSelectOption{\n    /**\n     * Option value\n     */\n    value: string;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import { Component, OnInit, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Page } from '../entities/wrappers/page';\nimport { MlkDynamicControl, MlkInput, MlkTextarea, MlkSelect } from '../entities/wrappers/mlk-dynamic-control';\nimport { ResponseWrapper } from '../entities/wrappers/response-wrapper';\nimport { StewardClientService } from '../steward-client.service';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\n\n@Component({\n  selector: 'stw-mlk-datatable',\n  template: `<div class=\"card card-outline-default\">\n    <div class=\"card-body\">\n      <form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\n        <div class=\"row\">\n          <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\n            <label for=\"from\">{{control.label}}: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i [class]=\"control.icon\"></i>\n                </span>\n              </div>\n  \n              <select *ngIf=\"isSelect(control.controlType)\" class=\"form-control form-control-sm checking-field\" [formControlName]=\"control.name\">\n                <option value=\"\" disabled selected>{{control.placeholder}}</option>\n                <option *ngFor=\"let o of control.controlType.options\">{{o.text}}</option>\n              </select>\n  \n              <textarea *ngIf=\"isTextArea(control.controlType)\" [cols]=\"control.controlType.cols\" [rows]=\"control.controlType.rows\" class=\"form-control form-control-sm checking-field\"\n                [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\n  \n              <input *ngIf=\"isInput(control.controlType)\" [type]=\"control.controlType.type\" [placeholder]=\"control.placeholder\" class=\"form-control form-control-sm checking-field\"\n                [formControlName]=\"control.name\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get(control.name).touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}} is required</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of {{control.controlType.minLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of {{control.controlType.maxLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than {{control.controlType.min}}</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than {{control.controlType.max}}</span>\n            </span>\n          </div>\n          <div class=\"col-md-3  mb-3\">\n            <label for=\"from\">From: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n              </div>\n              <input type=\"date\" placeholder=\"From...\" class=\"form-control form-control-sm checking-field\"\n                formControlName=\"from\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n                <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 100 characters</span>\n            </span>\n          </div>\n          <div class=\"col-md-3  mb-3\">\n            <label for=\"from\">To: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n              </div>\n              <input type=\"date\" placeholder=\"To...\" class=\"form-control form-control-sm checking-field\"\n                formControlName=\"to\" value=\"\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n                <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 100 characters</span>\n            </span>\n          </div>\n          <div class=\"col-md-3 mb-3\">\n            <label for=\"search\">Search:</label>\n            <div class=\"input-group\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-search\"></i>\n                </span>\n              </div>\n              <input formControlName=\"needle\" class=\"form-control form-control-sm checking-field\" type=\"text\"\n                placeholder=\"Search...\" (keyup)=\"updateFilter($event)\" />\n            </div>\n          </div>\n          <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\n          </span>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"pull-right inline-buttons\">\n              <button class=\"btn btn-secondary btn-sm\" type=\"reset\">\n                <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n                Reset\n              </button>\n              <button class=\"btn btn-primary btn-sm pull-right\" type=\"submit\">\n                <i class=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i>\n                Filter\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n  \n  <ngx-datatable #table class=\"bootstrap\" [headerHeight]=\"50\" [columnMode]=\"'force'\" [footerHeight]=\"50\" [rowHeight]=\"'auto'\"\n    [rows]=\"page.content\" [selected]=\"selected\" [selectionType]=\"'checkbox'\" (activate)=\"onActivate($event)\" (select)='onSelect($event)'\n    [count]=\"page.totalElements\" [offset]=\"page.number\" [externalPaging]=\"true\" [limit]=\"page.size\" (page)=\"loadPage($event, null)\">\n    <ngx-datatable-column [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\" [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\n      [checkboxable]=\"true\" *ngIf=\"enableCheckbox\">\n    </ngx-datatable-column>\n    <ngx-datatable-column [canAutoResize]=\"(c.canAutoResize) ? c.canAutoResize : true\" [name]=\"c.columnName\" [width]=\"c.width\"\n      [sortable]=\"(c.sortable) ? c.sortable : true\" [draggable]=\"(c.draggable) ? c.draggable : true\" [resizeable]=\"(c.resizeable) ? c.resizeable : true\"\n      *ngFor=\"let c of columns\">\n      <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n            {{(c.isDateColumn)? (row[c.fieldName] | date:'medium') : row[c.fieldName]}}\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <ngx-datatable-column [name]=\"moreActions.name\" *ngIf=\"moreActions\" [sortable]=\"false\" [canAutoResize]=\"false\">\n      <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n          <div class=\"input-group-prepend\">\n            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n              aria-expanded=\"false\">\n              <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\n            </button>\n            <div class=\"dropdown-menu\">\n              <a class=\"dropdown-item\" *ngFor=\"let action of moreActions.actions\" href=\"javascript:;\" (click)=\"onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName})\">{{action.actionName}}</a>\n              <!-- <a class=\"dropdown-item\" href=\"#\">Another action</a>\n                            <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n                            <div role=\"separator\" class=\"dropdown-divider\"></div>\n                            <a class=\"dropdown-item\" href=\"#\">Separated link</a> -->\n            </div>\n          </div>\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <!-- <ngx-datatable-column name=\"Description\">\n              <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column>\n            <ngx-datatable-column name=\"Actions\">\n              <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column> -->\n  </ngx-datatable>`,\n  styles: [``]\n})\nexport class MlkDatatableComponent implements OnInit {\n  @Input() columns: Array<MlkDataTableColumn> = [];\n  @Input() enableCheckbox: boolean = true;\n  @Input() endpoint: string;\n  @Input() moreActions: MlkMoreActions;\n  @Output() onActionsEvent = new EventEmitter<MlkMoreActionData>()\n  @Input() filterComponents: Array<MlkDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  page: Page<any> = new Page();\n  selected = [];\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  ;\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    let group = {};\n    this.filterComponents.forEach(comp => {\n      let validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if(comp.controlType instanceof MlkInput || comp.controlType instanceof MlkTextarea){\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if(comp.controlType instanceof MlkInput){\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators)\n    });\n    //add default controls\n    group['from'] = new FormControl('', Validators.maxLength(100));\n    group['to'] = new FormControl('', Validators.maxLength(100));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({ offset: 0, limit: this.page.size }, null);\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event\n   */\n  onActionClick(event: MlkMoreActionData) {\n    this.onActionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   * @param pageInfo\n   * @param filters\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if(this.params){\n      this.params.forEach((value, key)=>{\n        request.set(key, value);\n      });\n    }\n    request.set(\"page\", pageInfo.offset);\n    request.set(\"size\", pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request).subscribe(response => {\n      if (response.code == 200) {\n        this.page = response.data;\n      }\n    });\n\n  }\n\n  /**\n   * Used to handle select option\n   * @param event\n   */\n  onSelect(event) {\n\n  }\n\n  onActivate(event) {\n\n  }\n\n  updateFilter(event) {\n\n  }\n\n  /**\n   * Used to process table filter. If date filter is not provide the from value is \n   * set to 2018-01-01 and to value is set to 1 year from today\n   * @param form \n   */\n  processFilter(form) {\n    //@ts-ignore\n    let f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\n    //validate date \n    if(!this.filterForm.get('from').touched){//if from is not populated remove from request\n      f.delete('from');\n      // this.filterForm.get('from').setValue('2018-01-01');\n    }\n    if(!this.filterForm.get('to').touched){//if to is not populated remove from request\n      f.delete('to');\n      // let toDate = new Date();\n      // toDate.setDate(toDate.getFullYear() + 1);\n      // this.filterForm.get('to').setValue(this.getFormattedDate(toDate));\n    }\n\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, f);\n  }\n\n  /**\n   * Used to check if miliki control is input\n   * @param control\n   */\n  isInput(control: any) {\n    return control instanceof MlkInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   * @param control\n   */\n  isSelect(control: any) {\n    return control instanceof MlkSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof MlkTextarea;\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date\n   */\n  getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n}\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn)\n */\nexport interface MlkDataTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  canAutoResize?: boolean;\n  /**\n   * Enables a column to be draggable\n   */\n  draggable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class MlkMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name: string = \"Actions\";\n  /**\n   * Field name id from the server response e.g userId\n   */\n  idFieldName: string = \"id\";\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<MlkMoreActionData>;\n\n  constructor(actions: Array<MlkMoreActionData>, id?: string, name?: string) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n  }\n\n}\n\nexport interface MlkMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n}","import { NgModule } from '@angular/core';\nimport { StewardClientComponent } from './steward-client.component';\nimport { MlkDatatableComponent } from './mlk-datatable/mlk-datatable.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StewardConfig } from './steward-client.service';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    NgxDatatableModule,\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [StewardClientComponent, MlkDatatableComponent],\n  exports: [StewardClientComponent, MlkDatatableComponent]\n})\nexport class StewardClientModule {\n  static forRoot(config: StewardConfig) {\n    return {\n      ngModule: StewardClientModule,\n      providers: [ {provide: StewardConfig, useValue: config} ]\n    }\n  }\n }\n"]}