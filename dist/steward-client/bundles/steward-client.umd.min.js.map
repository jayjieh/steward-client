{"version":3,"sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","null","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/wrappers/mlk-dynamic-control.ts","ng://steward-client/lib/mlk-datatable/mlk-datatable.component.ts","ng://steward-client/lib/steward-client.module.ts"],"names":["ResponseWrapper","StewardConfig","StewardClientService","http","config","this","base_url","headers","HttpHeaders","Content-Type","access_token","append","prototype","post","endpoint","data","JSON","stringify","pipe","catchError","handleError","put","delete","request","body","get","options","params","getHttpParams","postFormData","formData","FormData","Object","keys","forEach","key","postFormDataMultipart","Array","isArray","k2","Authorization","undefined","HttpParams","httpParams","value","error","res","status","code","message","of","renderMore","id","intiateDataTable","Injectable","HttpClient","StewardClientComponent","ngOnInit","Component","args","selector","template","styles","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","__spread","arguments","length","concat","Page","size","totalElements","totalPages","first","last","content","sorted","Sort","number","unsorted","MlkDynamicControl","label","name","controlType","icon","isRequired","placeholder","MlkInput","type","minLength","min","maxLength","max","MlkTextarea","cols","rows","MlkSelect","MlkSelectOption","text","MlkDatatableComponent","sterwardService","tableRowHeight","tableFooterHeight","tableHeaderHeight","verticalScrollActive","horizontalScrollActive","columns","enableCheckbox","enableFilterHeader","enableDefaultTableHeader","enableSummary","summaryPosition","summaryHeight","onActionsEvent","EventEmitter","filterComponents","page","selected","onSelected","filter","group","comp","validators","Validators","required","FormControl","filterForm","FormGroup","loadPage","offset","limit","onActionClick","event","emit","pageInfo","filters","_this","Map","set","subscribe","response","onSelect","_a","console","log","splice","_b","apply","onActivate","updateFilter","processFilter","form","f","entries","touched","fd","Date","toISOString","td","isInput","control","isSelect","isTextArea","summaryFunc","cell","getFormattedDate","date","year","getFullYear","month","getMonth","toString","day","getDate","getFieldValue","field","k","split","Queue","bind","getObjectValue","tail","front","Input","Output","ViewChild","DatatableComponent","MlkMoreActions","actions","idFieldName","StewardClientModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","FormsModule","ReactiveFormsModule","NgxDatatableModule","CommonModule","BsDatepickerModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * Wraps server response\r\n */\r\nexport class ResponseWrapper<T> {\r\n    /**\r\n     * Http status code e.g. 200\r\n     */\r\n    code: number;\r\n    /**\r\n     * Server message\r\n     */\r\n    message: string;\r\n    /**\r\n     * Actual response data\r\n     */\r\n    data: T;\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Observable, of} from 'rxjs';\r\nimport {catchError} from 'rxjs/operators';\r\nimport {ResponseWrapper} from './entities/wrappers/response-wrapper';\r\n\r\nexport class StewardConfig {\r\n  base_url: string;\r\n  access_token?: string;\r\n  headers?: HttpHeaders;\r\n}\r\n\r\n@Injectable()\r\nexport class StewardClientService<T, E> {\r\n\r\n  private headers: HttpHeaders;\r\n  token: string;\r\n  base_url = '/';\r\n\r\n  constructor(private http: HttpClient, private config: StewardConfig) {\r\n    this.base_url = config.base_url;\r\n    if (config.headers) {\r\n      this.headers = config.headers;\r\n    } else {\r\n      this.headers = new HttpHeaders({\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n      });\r\n    }\r\n    if (config.access_token) {// append access token if the environment has access token\r\n      this.headers = this.headers.append('Authorization', 'Bearer ' + config.access_token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used to handle http post requests\r\n   */\r\n  post(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    return this.http.post(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8')}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Used to handle http post requests\r\n   */\r\n  put(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    return this.http.put(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8')}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  delete(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    return this.http.request('delete', this.base_url + endpoint, {\r\n      headers: this.headers.append('Content-Type', 'application/json; charset=utf-8'),\r\n      body: JSON.stringify(data)\r\n    }).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  get(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\r\n    const options = {\r\n      headers: this.headers,\r\n      params: this.getHttpParams(data)\r\n    };\r\n    return this.http.get(this.base_url + endpoint, options).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * if\r\n   * @param endpoint\r\n   * @param data\r\n   * @param headers\r\n   */\r\n  postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\r\n    const formData: FormData = new FormData();\r\n    Object.keys(data).forEach((key) => {\r\n      formData.append(key, data[key]);\r\n    });\r\n    if (this.headers.get('Authorization') && (!headers)) {\r\n      headers = this.headers;\r\n    } else if (!headers) {\r\n      headers = new HttpHeaders();\r\n    }\r\n    return this.http.post(this.base_url + endpoint, formData, {headers: headers}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    const formData: FormData = new FormData();\r\n    Object.keys(data).forEach((key) => {\r\n      if (Array.isArray(data[key])) {\r\n        data[key].forEach(k2 => {\r\n          formData.append(key, k2);\r\n        });\r\n      } else {\r\n        formData.append(key, data[key]);\r\n      }\r\n    });\r\n    return this.http.post(this.base_url + endpoint, formData, {headers: new HttpHeaders({'Authorization': 'Bearer ' + this.config.access_token})}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  private getHttpParams(data: Map<string, string>): HttpParams {\r\n    if (data === undefined) {\r\n      return new HttpParams();\r\n    }\r\n    let httpParams: HttpParams = new HttpParams();\r\n    data.forEach((value: string, key: string) => {\r\n      httpParams = httpParams.append(key, value);\r\n    });\r\n    return httpParams;\r\n  }\r\n\r\n  /**\r\n   * Used to catch exception thrown by http client returns internal server error\r\n   * if status 500 is encountered\r\n   */\r\n  private handleError<ResponseWrapper>() {\r\n    return (error: HttpErrorResponse): Observable<any> => {\r\n      const res = new ResponseWrapper();\r\n      //            console.error(error); // log to console instead\r\n      if (error.status === 500) {\r\n        res.code = error.status;\r\n        res.message = 'Sorry internal server error occured please try again later';\r\n      } else {\r\n        res.code = error.status;\r\n        res.message = error.error.message;\r\n        res.data = error.error.data;\r\n      }\r\n      return of(res);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Used to render action buttons\r\n   */\r\n  static renderMore(id: any) {\r\n    return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\r\n  }\r\n\r\n  public intiateDataTable(endpoint: string, data?: Map<string, string>) {\r\n    const options = {\r\n      headers: this.headers,\r\n      params: this.getHttpParams(data)\r\n    };\r\n    return this.http.get(this.base_url + endpoint, options).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'stw-steward-client',\r\n  template: `\r\n    <p>\r\n      steward-client works!\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class StewardClientComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * Datable page used to wrapper server content response\r\n */\r\nexport class Page<T> {\r\n    /**\r\n     * Number of items per page same as limit\r\n     */\r\n    size: number = 10;\r\n    /**\r\n     * Total items available on the server\r\n     */\r\n    totalElements: number = 0;\r\n    /**\r\n     * Total number of pages present\r\n     */\r\n    totalPages: number = 0;\r\n    /**\r\n     * Checks if is the first page\r\n     */\r\n    first: boolean = true;\r\n    /**\r\n     * Checks if it is the last page\r\n     */\r\n    last: boolean = false;\r\n    /**\r\n     * The actual page content\r\n     */\r\n    content: Array<T> = [];\r\n    /**\r\n     * Used to map sort parameters\r\n     */\r\n    sorted: Sort = new Sort();\r\n    /**\r\n     * Current page number\r\n     */\r\n    number: number = 0;\r\n}\r\n/**\r\n * used to map sort request\r\n */\r\nexport class Sort{\r\n    sorted: boolean = false;\r\n    unsorted: boolean = true;\r\n}\r\n","/**\r\n * Represents dynamic html controls (Input, TextArea and Select)\r\n */\r\nexport class MlkDynamicControl<T> {\r\n    /**\r\n     * Control label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Icon to be appended before the control (supports class defined icons)\r\n     */\r\n    icon: string;\r\n    /**\r\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\r\n     */\r\n    name: string;\r\n    /**\r\n     * The actual control (MlkInput, MlkTextArea & MlkSelect)\r\n     */\r\n    controlType: T;\r\n    /**\r\n     * Checks if the field is required\r\n     */\r\n    isRequired: boolean;\r\n    /**\r\n     * Control placeholder\r\n     */\r\n    placeholder: string = \"\";\r\n\r\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\r\n        isRequired: boolean = true, placeholder: string = null) {\r\n        this.label = label;\r\n        this.name = name;\r\n        this.controlType = controlType;\r\n        this.icon = icon;\r\n        this.isRequired = isRequired;\r\n        this.placeholder = placeholder ? placeholder : label;\r\n    }\r\n\r\n}\r\n/**\r\n * Used to represent html input with options:\r\n * type: default to text,  maxLength, minLength, min, max\r\n */\r\nexport class MlkInput{\r\n    /**\r\n     * Type of input e.g. text, number, date\r\n     */\r\n    type: string = \"text\";\r\n    /**\r\n     * Used to validate length of the input\r\n     */\r\n    maxLength: number;\r\n    /**\r\n     * Used to validate minimum input length\r\n     */\r\n    minLength: number;\r\n    /**\r\n     * Used to validate number inputs\r\n     */\r\n    min: number;\r\n    /**\r\n     * Used to validate number inputs\r\n     */\r\n    max: number;\r\n\r\n    constructor(type: string = \"text\") {\r\n        this.type = type;\r\n        this.minLength = this.min = 0;\r\n        this.maxLength = 4000;\r\n        this.max = 1000000000;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents html textarea input\r\n */\r\nexport class MlkTextarea{\r\n    /**\r\n     * Number textarea columns\r\n     */\r\n    cols?: number;\r\n    /**\r\n     * Number of textarea rows\r\n     */\r\n    rows?: number;\r\n    /**\r\n     * Validate maximum input length\r\n     */\r\n    maxLength: number;\r\n    /**\r\n     * Validate minimum input length\r\n     */\r\n    minLength: number;\r\n\r\n    constructor(cols: number = 5, rows: number = 1){\r\n        this.cols = cols;\r\n        this.rows = rows;\r\n        this.maxLength = 4000;\r\n        this.minLength = 0\r\n    }\r\n}\r\n\r\n/**\r\n * Represents html select control\r\n */\r\nexport class MlkSelect {\r\n    /**\r\n     * Select options\r\n     */\r\n    options: Array<MlkSelectOption>;\r\n\r\n    constructor(options: Array<MlkSelectOption>){\r\n        this.options = options;\r\n    }\r\n\r\n}\r\n\r\nexport class MlkSelectOption{\r\n    /**\r\n     * Option value\r\n     */\r\n    value: string;\r\n    /**\r\n     * Option text/label\r\n     */\r\n    text: string;\r\n\r\n    constructor(value: string, text: string = null){\r\n        this.value = value;\r\n        this.text = text ? text : value;\r\n    }\r\n\r\n}\r\n\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Page} from '../entities/wrappers/page';\r\nimport {MlkDynamicControl, MlkInput, MlkSelect, MlkTextarea} from '../entities/wrappers/mlk-dynamic-control';\r\nimport {ResponseWrapper} from '../entities/wrappers/response-wrapper';\r\nimport {StewardClientService} from '../steward-client.service';\r\nimport {DatatableComponent} from '@swimlane/ngx-datatable';\r\nimport {Queue} from 'queue-typescript';\r\n\r\n// const { Queue } = require('queue-typescript');\r\n\r\n@Component({\r\n  selector: 'stw-mlk-datatable',\r\n  template: `<div class=\"card card-outline-default\" *ngIf=\"enableFilterHeader\">\r\n  <div class=\"card-body\">\r\n    <form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\r\n          <label>{{control.label}}: </label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-append\">\r\n                <span class=\"input-group-text  form-icon-default\">\r\n                  <i [class]=\"control.icon\"></i>\r\n                </span>\r\n            </div>\r\n\r\n            <select *ngIf=\"isSelect(control.controlType)\" class=\"form-control form-control-sm checking-field\"\r\n                    [formControlName]=\"control.name\">\r\n              <option value=\"\" disabled selected>{{control.placeholder}}</option>\r\n              <option *ngFor=\"let o of control.controlType.options\">{{o.text}}</option>\r\n            </select>\r\n\r\n            <textarea *ngIf=\"isTextArea(control.controlType)\" [cols]=\"control.controlType.cols\"\r\n                      [rows]=\"control.controlType.rows\" class=\"form-control form-control-sm checking-field\"\r\n                      [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\r\n\r\n            <input *ngIf=\"isInput(control.controlType)\" [type]=\"control.controlType.type\"\r\n                   [placeholder]=\"control.placeholder\" class=\"form-control form-control-sm checking-field\"\r\n                   [formControlName]=\"control.name\"/>\r\n          </div>\r\n          <span class=\"help-block\" *ngIf=\"filterForm.get(control.name).touched\">\r\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}} is required</span>\r\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of {{control.controlType.minLength}} characters</span>\r\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of {{control.controlType.maxLength}} characters</span>\r\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than {{control.controlType.min}}</span>\r\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than {{control.controlType.max}}</span>\r\n            </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\" *ngIf=\"enableDefaultTableHeader\">\r\n        <div class=\"col-md-3 mb-3\">\r\n          <label>From: </label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-append\">\r\n                <span class=\"input-group-text form-icon-default\">\r\n                  <i class=\"fa fa-calendar-o\"></i>\r\n                </span>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-sm checking-field\"\r\n              id=\"inputTravelDate\"\r\n              formControlName=\"from\"\r\n              placeholder=\"From...\"\r\n              #dpfrom=\"bsDatepicker\"\r\n              bsDatepicker\r\n              [outsideClick]=\"false\"\r\n              [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\r\n              maxlength=\"30\"\r\n              required\r\n              readonly\r\n            />\r\n            <div class=\"input-group-append\">\r\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpfrom.toggle()\"\r\n                      [attr.aria-expanded]=\"dpfrom.isOpen\"><i class=\"fa fa-th\"></i></button>\r\n            </div>\r\n          </div>\r\n          <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\r\n                <span class=\"text-danger\"\r\n                      *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 30 characters</span>\r\n            </span>\r\n        </div>\r\n        <div class=\"col-md-3 mb-3\">\r\n          <label>To: </label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-append\">\r\n                <span class=\"input-group-text form-icon-default\">\r\n                  <i class=\"fa fa-calendar-o\"></i>\r\n                </span>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-sm checking-field\"\r\n              id=\"inputTravelDate\"\r\n              formControlName=\"to\"\r\n              placeholder=\"To...\"\r\n              #dpto=\"bsDatepicker\"\r\n              bsDatepicker\r\n              [outsideClick]=\"false\"\r\n              [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\r\n              maxlength=\"30\"\r\n              required\r\n              readonly\r\n            />\r\n            <div class=\"input-group-append\">\r\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpto.toggle()\" [attr.aria-expanded]=\"dpto.isOpen\">\r\n                <i class=\"fa fa-th\"></i></button>\r\n            </div>\r\n          </div>\r\n          <span class=\"help-block\" *ngIf=\"filterForm.get('to').touched\">\r\n                <span class=\"text-danger\"\r\n                      *ngIf=\"filterForm.get('to').hasError('maxlength')\">Maximum of 30 characters</span>\r\n            </span>\r\n        </div>\r\n        <div class=\"col-md-3 mb-3\">\r\n          <label>Search:</label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-prepend\">\r\n                <span class=\"input-group-text form-icon-default\">\r\n                  <i class=\"fa fa-search\"></i>\r\n                </span>\r\n            </div>\r\n            <input formControlName=\"needle\" class=\"form-control form-control-sm checking-field\" type=\"text\"\r\n                   placeholder=\"Search...\" (keyup)=\"updateFilter($event)\"/>\r\n          </div>\r\n        </div>\r\n        <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\r\n          </span>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"pull-right inline-buttons\">\r\n            <button class=\"btn btn-warning btn-sm\" type=\"reset\">\r\n              <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\r\n              Reset\r\n            </button>\r\n            <button class=\"btn btn-success btn-sm pull-right\" type=\"submit\">\r\n              <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n              Filter\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n<ngx-datatable\r\n  #table\r\n  [rowHeight]=\"tableRowHeight\"\r\n  [footerHeight]=\"tableFooterHeight\"\r\n  [headerHeight]=\"tableHeaderHeight\"\r\n  [scrollbarV]=\"verticalScrollActive\"\r\n  [scrollbarH]=\"horizontalScrollActive\"\r\n  [summaryRow]=\"enableSummary\"\r\n  [summaryPosition]=\"summaryPosition\"\r\n  [summaryHeight]=\"summaryHeight\"\r\n  class=\"bootstrap\"\r\n  [columnMode]=\"'force'\"\r\n  [rows]=\"page.content\"\r\n  [selected]=\"selected\"\r\n  [selectionType]=\"'checkbox'\"\r\n  (activate)=\"onActivate($event)\"\r\n  (select)='onSelect($event)'\r\n  [count]=\"page.totalElements\"\r\n  [offset]=\"page.number\"\r\n  [externalPaging]=\"true\"\r\n  [limit]=\"page.size\"\r\n  (page)=\"loadPage($event, null)\">\r\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\"\r\n                        [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\r\n                        [checkboxable]=\"true\" *ngIf=\"enableCheckbox\">\r\n  </ngx-datatable-column>\r\n  <ngx-datatable-column [summaryFunc]=\"(c.summaryFunc) ? c.summaryFunc : summaryFunc\"\r\n                        [canAutoResize]=\"(c.canAutoResize) ? c.canAutoResize : true\" [name]=\"c.columnName\"\r\n                        [width]=\"c.width\"\r\n                        [sortable]=\"(c.sortable) ? c.sortable : true\" [draggable]=\"(c.draggable) ? c.draggable : true\"\r\n                        [resizeable]=\"(c.resizeable) ? c.resizeable : true\"\r\n                        *ngFor=\"let c of columns; index as i;\">\r\n    <ng-template let-column=\"column\" ngx-datatable-header-template *ngIf=\"i==0\">\r\n      <strong>#</strong>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-row=\"row\" *ngIf=\"i==0\">\r\n        <span>\r\n            {{rowIndex+1}}\r\n        </span>\r\n    </ng-template>\r\n\r\n    <ng-template let-column=\"column\" ngx-datatable-header-template *ngIf=\"i==0\">\r\n      <strong>{{c.columnName}}</strong>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-row=\"row\" *ngIf=\"i==0\">\r\n        <span>\r\n            {{rowIndex+1}}\r\n        </span>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\" *ngIf=\"i==0\">\r\n        <span>\r\n            <ng-container *ngIf=\"c.isDateColumn; then t10\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && c.currencyText; then t40\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && !c.currencyText; then t70\"></ng-container>\r\n            <ng-container *ngIf=\"!c.isDateColumn && !c.isCurrencyColumn; then t70\"></ng-container>\r\n\r\n            <ng-template #t10>\r\n                {{(getFieldValue(row, c.fieldName) | date:'medium')}}\r\n            </ng-template>\r\n            <ng-template #t40>\r\n                {{(getFieldValue(row, c.fieldName) | currency:c.currencyText:'code')}}\r\n            </ng-template>\r\n            <ng-template #t70>\r\n                {{getFieldValue(row, c.fieldName)}}\r\n            </ng-template>\r\n        </span>\r\n    </ng-template>\r\n\r\n    <ng-template let-column=\"column\" ngx-datatable-header-template>\r\n      <strong>{{c.columnName}}</strong>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n        <span>\r\n            <ng-container *ngIf=\"c.isDateColumn; then t10\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && c.currencyText; then t40\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && !c.currencyText; then t70\"></ng-container>\r\n            <ng-container *ngIf=\"!c.isDateColumn && !c.isCurrencyColumn; then t70\"></ng-container>\r\n\r\n            <ng-template #t10>\r\n                {{(getFieldValue(row, c.fieldName) | date:'medium')}}\r\n            </ng-template>\r\n            <ng-template #t40>\r\n                {{(getFieldValue(row, c.fieldName) | currency:c.currencyText:'code')}}\r\n            </ng-template>\r\n            <ng-template #t70>\r\n                {{getFieldValue(row, c.fieldName)}}\r\n            </ng-template>\r\n        </span>\r\n    </ng-template>\r\n  </ngx-datatable-column>\r\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [name]=\"moreActions.name\" *ngIf=\"moreActions\" [sortable]=\"false\"\r\n                        [canAutoResize]=\"false\">\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n        <span>\r\n          <div class=\"input-group-prepend\">\r\n            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded=\"false\">\r\n              <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            <div class=\"dropdown-menu\">\r\n              <a class=\"dropdown-item\" *ngFor=\"let action of moreActions.actions\" href=\"javascript:;\"\r\n                 (click)=\"onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName, actionRow: row})\">{{action.actionName}}</a>\r\n            </div>\r\n          </div>\r\n        </span>\r\n    </ng-template>\r\n  </ngx-datatable-column>\r\n</ngx-datatable>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class MlkDatatableComponent implements OnInit {\r\n  @Input() tableRowHeight = 50;\r\n  @Input() tableFooterHeight = 50;\r\n  @Input() tableHeaderHeight = 50;\r\n  @Input() verticalScrollActive = false;\r\n  @Input() horizontalScrollActive = false;\r\n  @Input() columns: Array<MlkDataTableColumn> = [];\r\n  @Input() enableCheckbox = false;\r\n  @Input() endpoint: string;\r\n  @Input() enableFilterHeader = false;\r\n  @Input() enableDefaultTableHeader = false;\r\n  @Input() enableSummary = false;\r\n  @Input() summaryPosition = '\\'bottom\\'';\r\n  @Input() summaryHeight = '\\'auto\\'';\r\n  @Input() moreActions: MlkMoreActions;\r\n  @Output() onActionsEvent = new EventEmitter<MlkMoreActionData>();\r\n  @Input() filterComponents: Array<MlkDynamicControl<any>> = [];\r\n  @Input() params: Map<string, any>;\r\n  page: Page<any> = new Page();\r\n  selected = [];\r\n  @Output() onSelected = new EventEmitter<Array<any>>();\r\n  @ViewChild(DatatableComponent) table: DatatableComponent;\r\n  filter: Object = {};\r\n  filterForm: FormGroup;\r\n  emptySummaryFunc: () => null;\r\n\r\n\r\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\r\n  }\r\n\r\n  /**\r\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\r\n   */\r\n  ngOnInit() {\r\n    const group = {};\r\n    this.filterComponents.forEach(comp => {\r\n      const validators: Array<any> = [];\r\n      if (comp.isRequired) {\r\n        validators.push(Validators.required);\r\n      }\r\n\r\n      if (comp.controlType instanceof MlkInput || comp.controlType instanceof MlkTextarea) {\r\n        validators.push(Validators.minLength(comp.controlType.minLength));\r\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\r\n      }\r\n\r\n      if (comp.controlType instanceof MlkInput) {\r\n        validators.push(Validators.max(comp.controlType.max));\r\n        validators.push(Validators.min(comp.controlType.min));\r\n      }\r\n      group[comp.name] = new FormControl('', validators);\r\n    });\r\n    // add default controls\r\n    group['from'] = new FormControl('', Validators.maxLength(30));\r\n    group['to'] = new FormControl('', Validators.maxLength(30));\r\n    group['needle'] = new FormControl('', Validators.maxLength(200));\r\n    this.filterForm = new FormGroup(group);\r\n    this.loadPage({offset: 0, limit: this.page.size}, null);\r\n  }\r\n\r\n  /**\r\n   * Used to emit click event of the actions\r\n   * @param event\r\n   */\r\n  onActionClick(event: MlkMoreActionData) {\r\n    this.onActionsEvent.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Process server request of datable\r\n   * @param pageInfo\r\n   * @param filters\r\n   */\r\n  loadPage(pageInfo, filters) {\r\n    if (!this.endpoint) {\r\n      return;\r\n    }\r\n    let request: Map<string, any>;\r\n    if (filters) {\r\n      request = filters;\r\n    } else {\r\n      request = new Map();\r\n    }\r\n    if (this.params) {\r\n      this.params.forEach((value, key) => {\r\n        request.set(key, value);\r\n      });\r\n    }\r\n    request.set('page', pageInfo.offset);\r\n    request.set('size', pageInfo.limit);\r\n    this.sterwardService.get(this.endpoint, request).subscribe(response => {\r\n      if (response.code === 200) {\r\n        this.page = response.data;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Used to handle select option\r\n   * @param event\r\n   */\r\n  onSelect({selected}) {\r\n    console.log('Select Event', selected, this.selected);\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n    this.onSelected.emit(this.selected);\r\n  }\r\n\r\n  onActivate(event) {\r\n\r\n  }\r\n\r\n  updateFilter(event) {\r\n\r\n  }\r\n\r\n  /**\r\n   * Used to process table filter. If date filter is not provide the from value is\r\n   * set to 2018-01-01 and to value is set to 1 year from today\r\n   * @param form\r\n   */\r\n  processFilter(form) {\r\n    // @ts-ignore\r\n    const f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\r\n    // validate date\r\n    if (!this.filterForm.get('from').touched) {// if from is not populated remove from request\r\n      f.delete('from');\r\n      // this.filterForm.get('from').setValue('2018-01-01');\r\n    } else {\r\n      // f.get('from').setValue(new Date(this.filterForm.get('from').value));\r\n      const fd = new Date(this.filterForm.get('from').value);\r\n      f.set('from', fd.toISOString());\r\n    }\r\n    if (!this.filterForm.get('to').touched) {// if to is not populated remove from request\r\n      f.delete('to');\r\n      // let toDate = new Date();\r\n      // toDate.setDate(toDate.getFullYear() + 1);\r\n      // this.filterForm.get('to').setValue(this.getFormattedDate(toDate));\r\n    } else {\r\n      // f.get('to').setValue(new Date(this.filterForm.get('to').value));\r\n      const td = new Date(this.filterForm.get('to').value);\r\n      f.set('to', td.toISOString());\r\n    }\r\n\r\n    this.loadPage({offset: this.page.number, limit: this.page.size}, f);\r\n  }\r\n\r\n  /**\r\n   * Used to check if miliki control is input\r\n   * @param control\r\n   */\r\n  isInput(control: any) {\r\n    return control instanceof MlkInput;\r\n  }\r\n\r\n  /**\r\n   * Used to check if miliki control is select\r\n   * @param control\r\n   */\r\n  isSelect(control: any) {\r\n    return control instanceof MlkSelect;\r\n  }\r\n\r\n  /**\r\n   * Used to check if miliki control is textarea\r\n   */\r\n  isTextArea(control: any) {\r\n    return control instanceof MlkTextarea;\r\n  }\r\n\r\n  summaryFunc(cell: any) {\r\n    return (``);\r\n  }\r\n\r\n  /**\r\n   * Used to format date to string yyyy-MM-dd\r\n   * @param date\r\n   */\r\n  getFormattedDate(date) {\r\n    const year = date.getFullYear();\r\n\r\n    let month = (1 + date.getMonth()).toString();\r\n    month = month.length > 1 ? month : '0' + month;\r\n\r\n    let day = date.getDate().toString();\r\n    day = day.length > 1 ? day : '0' + day;\r\n\r\n    return year + '-' + month + '-' + day;\r\n  }\r\n\r\n  getFieldValue(data: Object, field: any) {\r\n    const k: Array<string> = field.split('.');\r\n    const keys = new Queue<string>(...k);\r\n    const value = this.getObjectValue(data, keys);\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Used to find key value based on the key sequence provided\r\n   * @param data expects an object\r\n   * @param keys i.e. user.gender.type.type\r\n   */\r\n  getObjectValue(data: any, keys: Queue<string>) {\r\n    if ((!(data instanceof Object)) || (keys.length === 1)) {\r\n      return data[keys.tail];\r\n    }\r\n    let value = null;\r\n    Object.keys(data).forEach((key) => {\r\n      if ((key === keys.front) && (data[key] instanceof Object)) {\r\n        value = this.getObjectValue(data[key], keys);\r\n      } else if (key === keys.tail) {\r\n        value = data[key];\r\n      }\r\n    });\r\n    return value;\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\r\n * draggable, resizable, isDateColumn, isCurrencyColumn, currencyText, summaryFunc)\r\n */\r\nexport interface MlkDataTableColumn {\r\n  /**\r\n   * column title\r\n   */\r\n  columnName: string;\r\n  /**\r\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\r\n   */\r\n  fieldName: string;\r\n  /**\r\n   * Width of the column\r\n   */\r\n  width?: number;\r\n  /**\r\n   * Enable sorting in a column\r\n   */\r\n  sortable?: boolean;\r\n  /**\r\n   * Makes a column resizable\r\n   */\r\n  canAutoResize?: boolean;\r\n  /**\r\n   * Enables a column to be draggable\r\n   */\r\n  draggable?: boolean;\r\n  /**\r\n   * Makes a column resizable\r\n   */\r\n  resizeable?: boolean;\r\n  /**\r\n   * Used to enable formating timestamp to string date\r\n   */\r\n  isDateColumn?: boolean;\r\n\r\n  /**\r\n   * Used to enable formating string to string currency\r\n   */\r\n  isCurrencyColumn?: boolean;\r\n\r\n  /**\r\n   * Used to set the currency string\r\n   */\r\n  currencyText?: string;\r\n\r\n  /**\r\n   * Function to call at the summary row\r\n   */\r\n  summaryFunc?: (any: any[]) => any;\r\n}\r\n\r\n/**\r\n * Used to display more actions column and the end of the table\r\n */\r\nexport class MlkMoreActions {\r\n  /**\r\n   * Action Column name e.g. More Actions\r\n   */\r\n  name = 'Actions';\r\n  /**\r\n   * Field name id from the server response e.g userId\r\n   */\r\n  idFieldName = 'id';\r\n  /**\r\n   * Actions e.g. Edit, Delete\r\n   */\r\n  actions: Array<MlkMoreActionData>;\r\n\r\n  constructor(actions: Array<MlkMoreActionData>, id?: string, name?: string) {\r\n    this.actions = actions;\r\n    this.name = name;\r\n    this.idFieldName = id;\r\n  }\r\n\r\n}\r\n\r\nexport interface MlkMoreActionData {\r\n  /**\r\n   * Never mind this field it will be used by the library\r\n   */\r\n  id?: any;\r\n  /**\r\n   * Action name e.g. Edit, Delete\r\n   */\r\n  actionName: any;\r\n\r\n  /**\r\n   * Action row : the clicked row\r\n   */\r\n  actionRow?: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { StewardClientComponent } from './steward-client.component';\r\nimport { MlkDatatableComponent } from './mlk-datatable/mlk-datatable.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { StewardConfig } from './steward-client.service';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgxDatatableModule,\r\n    CommonModule,\r\n    BsDatepickerModule.forRoot(),\r\n    HttpClientModule\r\n  ],\r\n  declarations: [StewardClientComponent, MlkDatatableComponent],\r\n  exports: [StewardClientComponent, MlkDatatableComponent]\r\n})\r\nexport class StewardClientModule {\r\n  static forRoot(config: StewardConfig) {\r\n    return {\r\n      ngModule: StewardClientModule,\r\n      providers: [ {provide: StewardConfig, useValue: config} ]\r\n    }\r\n  }\r\n }\r\n"]}