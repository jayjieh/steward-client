{"version":3,"sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","null","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/wrappers/mlk-dynamic-control.ts","ng://steward-client/lib/mlk-datatable/mlk-datatable.component.ts","ng://steward-client/lib/steward-client.module.ts"],"names":["ResponseWrapper","StewardConfig","StewardClientService","http","config","this","base_url","headers","append","HttpHeaders","Content-Type","access_token","prototype","post","endpoint","data","JSON","stringify","pipe","catchError","handleError","put","delete","request","body","get","options","params","getHttpParams","getFile","token","postFormData","formData","FormData","Object","keys","forEach","key","Authorization","postFormDataMultipart","Array","isArray","k2","putFormDataMultiPart","undefined","HttpParams","httpParams","value","error","res","status","code","message","of","renderMore","id","intiateDataTable","Injectable","HttpClient","StewardClientComponent","ngOnInit","Component","args","selector","template","styles","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","Page","size","totalElements","totalPages","first","last","content","sorted","Sort","number","unsorted","MlkDynamicControl","label","name","controlType","icon","isRequired","placeholder","MlkInput","type","minLength","min","maxLength","max","MlkTextarea","cols","rows","MlkSelect","MlkSelectOption","text","MlkDatatableComponent","sterwardService","tableRowHeight","tableFooterHeight","tableHeaderHeight","verticalScrollActive","horizontalScrollActive","columns","enableCheckbox","enableFilterHeader","enableDefaultTableHeader","enableSummary","summaryPosition","summaryHeight","onActionsEvent","EventEmitter","filterComponents","page","selected","filter","group","comp","validators","Validators","required","FormControl","filterForm","FormGroup","loadPage","offset","limit","onActionClick","event","emit","pageInfo","filters","_this","Map","set","subscribe","response","onSelect","onActivate","updateFilter","processFilter","form","f","entries","touched","fd","Date","toISOString","td","isInput","control","isSelect","isTextArea","summaryFunc","cell","getFormattedDate","date","year","getFullYear","month","getMonth","toString","length","day","getDate","getFieldValue","field","k","split","Queue","bind","apply","__spread","arguments","concat","getObjectValue","tail","front","Input","Output","ViewChild","DatatableComponent","MlkMoreActions","actions","idFieldName","StewardClientModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","FormsModule","ReactiveFormsModule","NgxDatatableModule","CommonModule","BsDatepickerModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * Wraps server response\n */\nexport class ResponseWrapper<T> {\n    /**\n     * Http status code e.g. 200\n     */\n    code: number;\n    /**\n     * Server message\n     */\n    message: string;\n    /**\n     * Actual response data\n     */\n    data: T;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ResponseWrapper } from './entities/wrappers/response-wrapper';\n\nexport class StewardConfig {\n    base_url: string;\n    access_token?: string;\n    headers?: HttpHeaders;\n}\n\n@Injectable()\nexport class StewardClientService<T, E> {\n\n    private headers: HttpHeaders;\n    token: string;\n    base_url: string = \"/\";\n\n    constructor(private http: HttpClient, config: StewardConfig) {\n        this.base_url = config.base_url;\n        if (config.headers) {\n            this.headers = config.headers.append('Content-Type', 'application/json; charset=utf-8');\n        } else {\n            this.headers = new HttpHeaders({\n                'Content-Type': 'application/json; charset=utf-8'\n            });\n        }\n        if (config.access_token) {//append access token if the environment has access token\n            this.headers = this.headers.append('Authorization', \"Bearer \" + config.access_token);\n        }\n    }\n    /**\n     * Used to handle http post requests\n     */\n    post(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.post(this.base_url + endpoint, JSON.stringify(data), { headers: this.headers }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    /**\n     * Used to handle http post requests\n     */\n    put(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.put(this.base_url + endpoint, JSON.stringify(data), { headers: this.headers }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    delete(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.request('delete', this.base_url + endpoint, { headers: this.headers, body: JSON.stringify(data) }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    get(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n        const options = {\n            headers: this.headers,\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n\n    getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n        const options = {\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint + '?access_token=' + this.token, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n    /**\n     * if\n     * @param endpoint \n     * @param data \n     * @param headers \n     */\n    postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            formData.append(key, data[key]);\n        });\n        if(this.headers.get(\"Authorization\") && (!headers)){\n            headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.token });\n        } else if(!headers){\n            headers = new HttpHeaders();\n        }\n        return this.http.post(this.base_url + endpoint, formData, { headers: headers}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            if (Array.isArray(data[key])) {\n                data[key].forEach(k2 => {\n                    formData.append(key, k2);\n                });\n            } else {\n                formData.append(key, data[key]);\n            }\n        });\n        return this.http.post(this.base_url + endpoint, formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            if (Array.isArray(data[key])) {\n                data[key].forEach(k2 => {\n                    formData.append(key, k2);\n                });\n            } else {\n                formData.append(key, data[key]);\n            }\n        });\n        return this.http.put(this.base_url + endpoint, formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    private getHttpParams(data: Map<string, string>): HttpParams {\n        if (data == undefined) {\n            return new HttpParams();\n        }\n        let httpParams: HttpParams = new HttpParams();\n        data.forEach((value: string, key: string) => {\n            httpParams = httpParams.append(key, value);\n        });\n        return httpParams;\n    }\n    /**\n     * Used to catch exception thrown by http client returns internal server error\n     * if status 500 is encountered\n     */\n    private handleError<ResponseWrapper>() {\n        return (error: HttpErrorResponse): Observable<any> => {\n            const res = new ResponseWrapper();\n            //            console.error(error); // log to console instead\n            if (error.status == 500) {\n                res.code = error.status;\n                res.message = 'Sorry internal server error occured please try again later';\n            } else {\n                res.code = error.status;\n                res.message = error.error.message;\n                res.data = error.error.data;\n            }\n            return of(res);\n        };\n    }\n    /**\n     * Used to render action buttons\n     */\n    static renderMore(id: any) {\n        return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\n    }\n\n    public intiateDataTable(endpoint: string, data?: Map<string, string>) {\n        const options = {\n            headers: this.headers,\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'stw-steward-client',\n  template: `\n    <p>\n      steward-client works!\n    </p>\n  `,\n  styles: []\n})\nexport class StewardClientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Datable page used to wrapper server content response\n */\nexport class Page<T> {\n    /**\n     * Number of items per page same as limit\n     */\n    size: number = 10;\n    /**\n     * Total items available on the server\n     */\n    totalElements: number = 0;\n    /**\n     * Total number of pages present\n     */\n    totalPages: number = 0;\n    /**\n     * Checks if is the first page\n     */\n    first: boolean = true;\n    /**\n     * Checks if it is the last page\n     */\n    last: boolean = false;\n    /**\n     * The actual page content\n     */\n    content: Array<T> = [];\n    /**\n     * Used to map sort parameters\n     */\n    sorted: Sort = new Sort();\n    /**\n     * Current page number\n     */\n    number: number = 0;\n}\n/**\n * used to map sort request\n */\nexport class Sort{\n    sorted: boolean = false;\n    unsorted: boolean = true;\n}\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class MlkDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (MlkInput, MlkTextArea & MlkSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = true, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class MlkInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string = \"text\";\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class MlkTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class MlkSelect {\n    /**\n     * Select options\n     */\n    options: Array<MlkSelectOption>;\n\n    constructor(options: Array<MlkSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class MlkSelectOption{\n    /**\n     * Option value\n     */\n    value: string;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import { Component, OnInit, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Page } from '../entities/wrappers/page';\nimport { MlkDynamicControl, MlkInput, MlkTextarea, MlkSelect } from '../entities/wrappers/mlk-dynamic-control';\nimport { ResponseWrapper } from '../entities/wrappers/response-wrapper';\nimport { StewardClientService } from '../steward-client.service';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { Queue } from 'queue-typescript';\n//const { Queue } = require('queue-typescript');\n\n@Component({\n  selector: 'stw-mlk-datatable',\n  template: `<div class=\"card card-outline-default\" *ngIf=\"enableFilterHeader\">\n<div class=\"card-body\">\n<form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\n\n<div class=\"row\">\n          <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\n            <label for=\"from\">{{control.label}}: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i [class]=\"control.icon\"></i>\n                </span>\n              </div>\n  \n              <select *ngIf=\"isSelect(control.controlType)\" class=\"form-control form-control-sm checking-field\" [formControlName]=\"control.name\">\n                <option value=\"\" disabled selected>{{control.placeholder}}</option>\n                <option *ngFor=\"let o of control.controlType.options\">{{o.text}}</option>\n              </select>\n  \n              <textarea *ngIf=\"isTextArea(control.controlType)\" [cols]=\"control.controlType.cols\" [rows]=\"control.controlType.rows\" class=\"form-control form-control-sm checking-field\"\n                [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\n  \n              <input *ngIf=\"isInput(control.controlType)\" [type]=\"control.controlType.type\" [placeholder]=\"control.placeholder\" class=\"form-control form-control-sm checking-field\"\n                [formControlName]=\"control.name\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get(control.name).touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}} is required</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of {{control.controlType.minLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of {{control.controlType.maxLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than {{control.controlType.min}}</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than {{control.controlType.max}}</span>\n            </span>\n          </div>\n</div>\n\n<div class=\"row\" *ngIf=\"enableDefaultTableHeader\">\n          <div class=\"col-md-3 mb-3\">\n            <label for=\"from\">From: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n              </div>\n                <input \n                type=\"text\" \n                class=\"form-control form-control-sm checking-field\" \n                id=\"inputTravelDate\" \n                formControlName=\"from\" \n                placeholder=\"From...\"\n                #dpfrom=\"bsDatepicker\"\n                bsDatepicker\n                [outsideClick]=\"false\"\n                [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\n                maxlength=\"30\"\n                required\n                readonly\n                />\n                  <div class=\"input-group-append\">\n                    <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpfrom.toggle()\" [attr.aria-expanded]=\"dpfrom.isOpen\"><i class=\"fa fa-th\"></i></button>\n                  </div>\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n                <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 30 characters</span>\n            </span>\n          </div>\n          <div class=\"col-md-3 mb-3\">\n            <label for=\"from\">To: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n              </div>\n                <input \n                type=\"text\" \n                class=\"form-control form-control-sm checking-field\" \n                id=\"inputTravelDate\" \n                formControlName=\"to\" \n                placeholder=\"To...\"\n                #dpto=\"bsDatepicker\"\n                bsDatepicker\n                [outsideClick]=\"false\"\n                [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\n                maxlength=\"30\"\n                required\n                readonly\n                />\n                  <div class=\"input-group-append\">\n                    <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpto.toggle()\" [attr.aria-expanded]=\"dpto.isOpen\"><i class=\"fa fa-th\"></i></button>\n                  </div>  \n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('to').touched\">\n                <span class=\"text-danger\" *ngIf=\"filterForm.get('to').hasError('maxlength')\">Maximum of 30 characters</span>\n            </span>\n          </div>\n          <div class=\"col-md-3 mb-3\">\n            <label for=\"search\">Search:</label>\n            <div class=\"input-group\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-search\"></i>\n                </span>\n              </div>\n              <input formControlName=\"needle\" class=\"form-control form-control-sm checking-field\" type=\"text\"\n                placeholder=\"Search...\" (keyup)=\"updateFilter($event)\" />\n            </div>\n          </div>\n          <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\n          </span>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n            <div class=\"pull-right inline-buttons\">\n              <button class=\"btn btn-warning btn-sm\" type=\"reset\">\n                <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n                Reset\n              </button>\n              <button class=\"btn btn-success btn-sm pull-right\" type=\"submit\">\n                <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\n                Filter\n              </button>\n            </div>\n\t</div>\n</div>\n      \n</form>\n</div>\n</div>\n  \n  <ngx-datatable \n    #table \n    [rowHeight]=\"tableRowHeight\"\n    [footerHeight]=\"tableFooterHeight\"\n    [headerHeight]=\"tableHeaderHeight\" \n    [scrollbarV]=\"verticalScrollActive\"\n    [scrollbarH]=\"horizontalScrollActive\"\n    [summaryRow]=\"enableSummary\"\n    [summaryPosition]=\"summaryPosition\"\n    [summaryHeight]=\"summaryHeight\"\n    class=\"bootstrap\"    \n    [columnMode]=\"'force'\"\n    [rows]=\"page.content\" \n    [selected]=\"selected\" \n    [selectionType]=\"'checkbox'\" \n    (activate)=\"onActivate($event)\" \n    (select)='onSelect($event)'\n    [count]=\"page.totalElements\" \n    [offset]=\"page.number\" \n    [externalPaging]=\"true\" \n    [limit]=\"page.size\" \n    (page)=\"loadPage($event, null)\">\n    <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\" [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\n      [checkboxable]=\"true\" *ngIf=\"enableCheckbox\">\n    </ngx-datatable-column>\n    <ngx-datatable-column [summaryFunc]=\"(c.summaryFunc) ? c.summaryFunc : summaryFunc\" [canAutoResize]=\"(c.canAutoResize) ? c.canAutoResize : true\" [name]=\"c.columnName\" [width]=\"c.width\"\n      [sortable]=\"(c.sortable) ? c.sortable : true\" [draggable]=\"(c.draggable) ? c.draggable : true\" [resizeable]=\"(c.resizeable) ? c.resizeable : true\"\n      *ngFor=\"let c of columns\">\n      <ng-template let-column=\"column\" ngx-datatable-header-template>\n        <strong>{{c.columnName}}</strong>\n      </ng-template>\n      <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n            <!--{{(c.isDateColumn)?(getFieldValue(row, c.fieldName) | date:'medium') : getFieldValue(row, c.fieldName)}} -->\n            <!--{{\n              if(c.isDateColumn)\n              { \n                (getFieldValue(row, c.fieldName) | date:'medium') \n              }\n              else if(c.isCurrencyColumn)\n              { \n                (getFieldValue(row, c.fieldName) | currency:'c.currencyText') \n              }\n              else \n              {\n                getFieldValue(row, c.fieldName)\n              }\n            }}-->\n            <!--<div [ngSwitch]=\"c.isDateColumn\">\n              <div *ngSwitchCase=\"true\">{{(getFieldValue(row, c.fieldName) | date:'medium')}}</div>\n              <div *ngSwitchDefault></div>\n            </div>\n            <div [ngSwitch]=\"c.isCurrencyColumn\">\n              <div *ngSwitchCase=\"true\">{{(getFieldValue(row, c.fieldName) | currency:'c.currencyText')}}</div>\n              <div *ngSwitchDefault></div>\n            </div> -->\n            <ng-container *ngIf=\"c.isDateColumn; then t10\"></ng-container>\n            <ng-container *ngIf=\"c.isCurrencyColumn && c.currencyText; then t40\"></ng-container>\n            <ng-container *ngIf=\"!c.isDateColumn && !c.isCurrencyColumn; then t70\"></ng-container>\n\n            <ng-template #t10>\n                {{(getFieldValue(row, c.fieldName) | date:'medium')}}\n            </ng-template>\n            <ng-template #t40>\n                {{(getFieldValue(row, c.fieldName) | currency:'c.currencyText')}}\n            </ng-template>\n            <ng-template #t70>\n                {{getFieldValue(row, c.fieldName)}}\n            </ng-template>\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [name]=\"moreActions.name\" *ngIf=\"moreActions\" [sortable]=\"false\" [canAutoResize]=\"false\">\n      <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n          <div class=\"input-group-prepend\">\n            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n              aria-expanded=\"false\">\n              <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\n            </button>\n            <div class=\"dropdown-menu\">\n              <a class=\"dropdown-item\" *ngFor=\"let action of moreActions.actions\" href=\"javascript:;\" (click)=\"onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName, actionRow: row})\">{{action.actionName}}</a>\n              <!-- <a class=\"dropdown-item\" href=\"#\">Another action</a>\n                            <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n                            <div role=\"separator\" class=\"dropdown-divider\"></div>\n                            <a class=\"dropdown-item\" href=\"#\">Separated link</a> -->\n            </div>\n          </div>\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <!-- <ngx-datatable-column name=\"Description\">\n              <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column>\n            <ngx-datatable-column name=\"Actions\">\n              <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column> -->\n  </ngx-datatable>\n`,\n  styles: [``]\n})\nexport class MlkDatatableComponent implements OnInit \n{\n  @Input() tableRowHeight: number = 50;\n  @Input() tableFooterHeight: number = 50;\n  @Input() tableHeaderHeight: number = 50;\n  @Input() verticalScrollActive: boolean = false;\n  @Input() horizontalScrollActive: boolean = false;\n  @Input() columns: Array<MlkDataTableColumn> = [];\n  @Input() enableCheckbox: boolean = false;\n  @Input() endpoint: string;\n  @Input() enableFilterHeader: boolean = false;\n  @Input() enableDefaultTableHeader: boolean = false;\n  @Input() enableSummary: boolean = false;\n  @Input() summaryPosition: string = \"'bottom'\";\n  @Input() summaryHeight: string = \"'auto'\";\n  @Input() moreActions: MlkMoreActions;\n  @Output() onActionsEvent = new EventEmitter<MlkMoreActionData>()\n  @Input() filterComponents: Array<MlkDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  page: Page<any> = new Page();\n  selected = [];\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  emptySummaryFunc: () => null;\n  ;\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    let group = {};\n    this.filterComponents.forEach(comp => {\n      let validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if(comp.controlType instanceof MlkInput || comp.controlType instanceof MlkTextarea){\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if(comp.controlType instanceof MlkInput){\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators)\n    });\n    //add default controls\n    group['from'] = new FormControl('', Validators.maxLength(30));\n    group['to'] = new FormControl('', Validators.maxLength(30));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({ offset: 0, limit: this.page.size }, null);\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event\n   */\n  onActionClick(event: MlkMoreActionData) {\n    this.onActionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   * @param pageInfo\n   * @param filters\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if(this.params){\n      this.params.forEach((value, key)=>{\n        request.set(key, value);\n      });\n    }\n    request.set(\"page\", pageInfo.offset);\n    request.set(\"size\", pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request).subscribe(response => {\n      if (response.code == 200) {\n        this.page = response.data;\n      }\n    });\n\n  }\n\n  /**\n   * Used to handle select option\n   * @param event\n   */\n  onSelect(event) {\n\n  }\n\n  onActivate(event) {\n\n  }\n\n  updateFilter(event) {\n\n  }\n\n  /**\n   * Used to process table filter. If date filter is not provide the from value is \n   * set to 2018-01-01 and to value is set to 1 year from today\n   * @param form \n   */\n  processFilter(form) {\n    //@ts-ignore\n    let f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\n    //validate date \n    if(!this.filterForm.get('from').touched)\n    {//if from is not populated remove from request\n      f.delete('from');\n      // this.filterForm.get('from').setValue('2018-01-01');\n    }\n    else\n    {\n      //f.get('from').setValue(new Date(this.filterForm.get('from').value));\n      let fd = new Date(this.filterForm.get('from').value);\n      f.set('from', fd.toISOString());\n    }\n    if(!this.filterForm.get('to').touched)\n    {//if to is not populated remove from request\n      f.delete('to');\n      // let toDate = new Date();\n      // toDate.setDate(toDate.getFullYear() + 1);\n      // this.filterForm.get('to').setValue(this.getFormattedDate(toDate));\n    }\n    else\n    {\n      //f.get('to').setValue(new Date(this.filterForm.get('to').value));\n      let td = new Date(this.filterForm.get('to').value);\n      f.set('to', td.toISOString());\n    }\n\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, f);\n  }\n\n  /**\n   * Used to check if miliki control is input\n   * @param control\n   */\n  isInput(control: any) {\n    return control instanceof MlkInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   * @param control\n   */\n  isSelect(control: any) {\n    return control instanceof MlkSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof MlkTextarea;\n  }\n\n  summaryFunc(cell: any) {\n    return(``);\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date\n   */\n  getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n  getFieldValue(data: Object, field: any){\n    var k: Array<string> = field.split(\".\");\n    var keys = new Queue<string>(...k);\n    let value = this.getObjectValue(data, keys);\n    return value;\n  }\n\n  /**\n   * Used to find key value based on the key sequence provided\n   * @param data expects an object\n   * @param keys i.e. user.gender.type.type\n   */\n  getObjectValue(data: any, keys: Queue<string>) {\n    if ((!(data instanceof Object)) || (keys.length == 1))  {\n      return data[keys.tail];\n    }\n    let value = null;\n    Object.keys(data).forEach((key) => {\n      if ((key == keys.front) && (data[key] instanceof Object)) {\n        value = this.getObjectValue(data[key], keys);\n      } else if(key == keys.tail){\n        value = data[key];\n      }\n    });\n    return value;\n\n  }\n\n}\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn, isCurrencyColumn, currencyText, summaryFunc)\n */\nexport interface MlkDataTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  canAutoResize?: boolean;\n  /**\n   * Enables a column to be draggable\n   */\n  draggable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n\n  /**\n   * Used to enable formating string to string currency\n   */\n  isCurrencyColumn?: boolean;\n\n  /**\n   * Used to set the currency string\n   */\n  currencyText?: string;\n\n  /**\n   * Function to call at the summary row\n   */\n  summaryFunc?: (any: any[]) => any;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class MlkMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name: string = \"Actions\";\n  /**\n   * Field name id from the server response e.g userId\n   */\n  idFieldName: string = \"id\";\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<MlkMoreActionData>;\n\n  constructor(actions: Array<MlkMoreActionData>, id?: string, name?: string) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n  }\n\n}\n\nexport interface MlkMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n\n  /**\n   * Action row : the clicked row\n   */\n  actionRow?: any;\n}","import { NgModule } from '@angular/core';\nimport { StewardClientComponent } from './steward-client.component';\nimport { MlkDatatableComponent } from './mlk-datatable/mlk-datatable.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StewardConfig } from './steward-client.service';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    NgxDatatableModule,\n    CommonModule,\n    BsDatepickerModule.forRoot(),\n    HttpClientModule\n  ],\n  declarations: [StewardClientComponent, MlkDatatableComponent],\n  exports: [StewardClientComponent, MlkDatatableComponent]\n})\nexport class StewardClientModule {\n  static forRoot(config: StewardConfig) {\n    return {\n      ngModule: StewardClientModule,\n      providers: [ {provide: StewardConfig, useValue: config} ]\n    }\n  }\n }\n"]}