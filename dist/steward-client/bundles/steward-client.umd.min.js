!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common/http"),require("rxjs"),require("rxjs/operators"),require("@angular/forms"),require("@swimlane/ngx-datatable"),require("queue-typescript"),require("@angular/common")):"function"==typeof define&&define.amd?define("steward-client",["exports","@angular/core","@angular/common/http","rxjs","rxjs/operators","@angular/forms","@swimlane/ngx-datatable","queue-typescript","@angular/common"],e):e(t["steward-client"]={},t.ng.core,t.ng.common.http,t.rxjs,t.rxjs.operators,t.ng.forms,null,null,t.ng.common)}(this,function(t,n,o,r,a,s,i,l,c){"use strict";var p=function k(){},u=function I(){},e=function(){function t(t,e){this.http=t,this.base_url="/",this.base_url=e.base_url,e.headers?this.headers=e.headers.append("Content-Type","application/json; charset=utf-8"):this.headers=new o.HttpHeaders({"Content-Type":"application/json; charset=utf-8"}),e.access_token&&(this.headers=this.headers.append("Authorization","Bearer "+e.access_token))}return t.prototype.post=function(t,e){return this.http.post(this.base_url+t,JSON.stringify(e),{headers:this.headers}).pipe(a.catchError(this.handleError()))},t.prototype.put=function(t,e){return this.http.put(this.base_url+t,JSON.stringify(e),{headers:this.headers}).pipe(a.catchError(this.handleError()))},t.prototype["delete"]=function(t,e){return this.http.request("delete",this.base_url+t,{headers:this.headers,body:JSON.stringify(e)}).pipe(a.catchError(this.handleError()))},t.prototype.get=function(t,e){var n={headers:this.headers,params:this.getHttpParams(e)};return this.http.get(this.base_url+t,n).pipe(a.catchError(this.handleError()))},t.prototype.getFile=function(t,e){var n={params:this.getHttpParams(e)};return this.http.get(this.base_url+t+"?access_token="+this.token,n).pipe(a.catchError(this.handleError()))},t.prototype.postFormData=function(t,e,n){var r=new FormData;return Object.keys(e).forEach(function(t){r.append(t,e[t])}),this.headers.get("Authorization")&&!n?n=new o.HttpHeaders({Authorization:"Bearer "+this.token}):n||(n=new o.HttpHeaders),this.http.post(this.base_url+t,r,{headers:n}).pipe(a.catchError(this.handleError()))},t.prototype.postFormDataMultipart=function(t,n){var r=new FormData;return Object.keys(n).forEach(function(e){Array.isArray(n[e])?n[e].forEach(function(t){r.append(e,t)}):r.append(e,n[e])}),this.http.post(this.base_url+t,r,{headers:new o.HttpHeaders({Authorization:"Bearer "+this.token})}).pipe(a.catchError(this.handleError()))},t.prototype.putFormDataMultiPart=function(t,n){var r=new FormData;return Object.keys(n).forEach(function(e){Array.isArray(n[e])?n[e].forEach(function(t){r.append(e,t)}):r.append(e,n[e])}),this.http.put(this.base_url+t,r,{headers:new o.HttpHeaders({Authorization:"Bearer "+this.token})}).pipe(a.catchError(this.handleError()))},t.prototype.getHttpParams=function(t){if(t==undefined)return new o.HttpParams;var n=new o.HttpParams;return t.forEach(function(t,e){n=n.append(e,t)}),n},t.prototype.handleError=function(){return function(t){var e=new p;return 500==t.status?(e.code=t.status,e.message="Sorry internal server error occured please try again later"):(e.code=t.status,e.message=t.error.message,e.data=t.error.data),r.of(e)}},t.renderMore=function(t){return"<div class='actions-buttons center' id='"+t+"'><i class='fa fa-check' title='Approve'></i> <i class='fa fa-ban' title='Decline'></i></div>"},t.prototype.intiateDataTable=function(t,e){var n={headers:this.headers,params:this.getHttpParams(e)};return this.http.get(this.base_url+t,n).pipe(a.catchError(this.handleError()))},t.decorators=[{type:n.Injectable}],t.ctorParameters=function(){return[{type:o.HttpClient},{type:u}]},t}(),d=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:n.Component,args:[{selector:"stw-steward-client",template:"\n    <p>\n      steward-client works!\n    </p>\n  ",styles:[]}]}],t.ctorParameters=function(){return[]},t}();function m(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),s=[];try{for(;(void 0===e||0<e--)&&!(r=a.next()).done;)s.push(r.value)}catch(i){o={error:i}}finally{try{r&&!r.done&&(n=a["return"])&&n.call(a)}finally{if(o)throw o.error}}return s}var h=function C(){this.size=10,this.totalElements=0,this.totalPages=0,this.first=!0,this.last=!1,this.content=[],this.sorted=new f,this.number=0},f=function A(){this.sorted=!1,this.unsorted=!0},g=function S(t,e,n,r,o,a){void 0===r&&(r="fa fa-file-text-o"),void 0===o&&(o=!0),void 0===a&&(a=null),this.placeholder="",this.label=t,this.name=e,this.controlType=n,this.icon=r,this.isRequired=o,this.placeholder=a||t},y=function M(t){void 0===t&&(t="text"),this.type="text",this.type=t,this.minLength=this.min=0,this.maxLength=4e3,this.max=1e9},b=function T(t,e){void 0===t&&(t=5),void 0===e&&(e=1),this.cols=t,this.rows=e,this.maxLength=4e3,this.minLength=0},v=function H(t){this.options=t},x=function j(t,e){void 0===e&&(e=null),this.value=t,this.text=e||t},w=function(){function t(t){this.sterwardService=t,this.columns=[],this.enableCheckbox=!1,this.enableSummary=!1,this.summaryPosition="'bottom'",this.summaryHeight="'auto'",this.onActionsEvent=new n.EventEmitter,this.filterComponents=[],this.page=new h,this.selected=[],this.filter={}}return t.prototype.ngOnInit=function(){var n={};this.filterComponents.forEach(function(t){var e=[];t.isRequired&&e.push(s.Validators.required),(t.controlType instanceof y||t.controlType instanceof b)&&(e.push(s.Validators.minLength(t.controlType.minLength)),e.push(s.Validators.maxLength(t.controlType.maxLength))),t.controlType instanceof y&&(e.push(s.Validators.max(t.controlType.max)),e.push(s.Validators.min(t.controlType.min))),n[t.name]=new s.FormControl("",e)}),n.from=new s.FormControl("",s.Validators.maxLength(100)),n.to=new s.FormControl("",s.Validators.maxLength(100)),n.needle=new s.FormControl("",s.Validators.maxLength(200)),this.filterForm=new s.FormGroup(n),this.loadPage({offset:0,limit:this.page.size},null)},t.prototype.onActionClick=function(t){this.onActionsEvent.emit(t)},t.prototype.loadPage=function(t,e){var n,r=this;this.endpoint&&(n=e||new Map,this.params&&this.params.forEach(function(t,e){n.set(e,t)}),n.set("page",t.offset),n.set("size",t.limit),this.sterwardService.get(this.endpoint,n).subscribe(function(t){200==t.code&&(r.page=t.data)}))},t.prototype.onSelect=function(t){},t.prototype.onActivate=function(t){},t.prototype.updateFilter=function(t){},t.prototype.processFilter=function(t){var e=new Map(Object.entries(this.filterForm.value));this.filterForm.get("from").touched||e["delete"]("from"),this.filterForm.get("to").touched||e["delete"]("to"),this.loadPage({offset:this.page.number,limit:this.page.size},e)},t.prototype.isInput=function(t){return t instanceof y},t.prototype.isSelect=function(t){return t instanceof v},t.prototype.isTextArea=function(t){return t instanceof b},t.prototype.summaryFunc=function(t){return""},t.prototype.getFormattedDate=function(t){var e=t.getFullYear(),n=(1+t.getMonth()).toString();n=1<n.length?n:"0"+n;var r=t.getDate().toString();return e+"-"+n+"-"+(r=1<r.length?r:"0"+r)},t.prototype.getFieldValue=function(t,e){var n=e.split("."),r=new(l.Queue.bind.apply(l.Queue,function o(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(m(arguments[e]));return t}([void 0],n)));return this.getObjectValue(t,r)},t.prototype.getObjectValue=function(e,n){var r=this;if(!(e instanceof Object)||1==n.length)return e[n.tail];var o=null;return Object.keys(e).forEach(function(t){t==n.front&&e[t]instanceof Object?o=r.getObjectValue(e[t],n):t==n.tail&&(o=e[t])}),o},t.decorators=[{type:n.Component,args:[{selector:"stw-mlk-datatable",template:'<div class="card card-outline-default">\n    <div class="card-body">\n      <form (ngSubmit)="processFilter(filterForm)" [formGroup]="filterForm">\n        <div class="row">\n          <div class="col-md-3  mb-3" *ngFor="let control of filterComponents">\n            <label for="from">{{control.label}}: </label>\n            <div class="input-group">\n              <div class="input-group-append">\n                <span class="input-group-text  form-icon-default">\n                  <i [class]="control.icon"></i>\n                </span>\n              </div>\n  \n              <select *ngIf="isSelect(control.controlType)" class="form-control form-control-sm checking-field" [formControlName]="control.name">\n                <option value="" disabled selected>{{control.placeholder}}</option>\n                <option *ngFor="let o of control.controlType.options">{{o.text}}</option>\n              </select>\n  \n              <textarea *ngIf="isTextArea(control.controlType)" [cols]="control.controlType.cols" [rows]="control.controlType.rows" class="form-control form-control-sm checking-field"\n                [placeholder]="control.placeholder" [formControlName]="control.name"></textarea>\n  \n              <input *ngIf="isInput(control.controlType)" [type]="control.controlType.type" [placeholder]="control.placeholder" class="form-control form-control-sm checking-field"\n                [formControlName]="control.name" />\n            </div>\n            <span class="help-block" *ngIf="filterForm.get(control.name).touched">\n              <span class="text-danger" *ngIf="filterForm.get(control.name).hasError(\'required\')">{{control.placeholder}} is required</span>\n              <span class="text-danger" *ngIf="filterForm.get(control.name).hasError(\'minlength\')">Minimum of {{control.controlType.minLength}} characters</span>\n              <span class="text-danger" *ngIf="filterForm.get(control.name).hasError(\'maxlength\')">Maximum of {{control.controlType.maxLength}} characters</span>\n              <span class="text-danger" *ngIf="filterForm.get(control.name).hasError(\'min\')">Should be greater than {{control.controlType.min}}</span>\n              <span class="text-danger" *ngIf="filterForm.get(control.name).hasError(\'max\')">Should be less than {{control.controlType.max}}</span>\n            </span>\n          </div>\n          <div class="col-md-3  mb-3">\n            <label for="from">From: </label>\n            <div class="input-group">\n              <div class="input-group-append">\n                <span class="input-group-text  form-icon-default">\n                  <i class="fa fa-calendar-o"></i>\n                </span>\n              </div>\n              <input type="date" placeholder="From..." class="form-control form-control-sm checking-field"\n                formControlName="from" />\n            </div>\n            <span class="help-block" *ngIf="filterForm.get(\'from\').touched">\n                <span class="text-danger" *ngIf="filterForm.get(\'from\').hasError(\'maxlength\')">Maximum of 100 characters</span>\n            </span>\n          </div>\n          <div class="col-md-3  mb-3">\n            <label for="from">To: </label>\n            <div class="input-group">\n              <div class="input-group-append">\n                <span class="input-group-text  form-icon-default">\n                  <i class="fa fa-calendar-o"></i>\n                </span>\n              </div>\n              <input type="date" placeholder="To..." class="form-control form-control-sm checking-field"\n                formControlName="to" value="" />\n            </div>\n            <span class="help-block" *ngIf="filterForm.get(\'from\').touched">\n                <span class="text-danger" *ngIf="filterForm.get(\'from\').hasError(\'maxlength\')">Maximum of 100 characters</span>\n            </span>\n          </div>\n          <div class="col-md-3 mb-3">\n            <label for="search">Search:</label>\n            <div class="input-group">\n              <div class="input-group-prepend">\n                <span class="input-group-text form-icon-default">\n                  <i class="fa fa-search"></i>\n                </span>\n              </div>\n              <input formControlName="needle" class="form-control form-control-sm checking-field" type="text"\n                placeholder="Search..." (keyup)="updateFilter($event)" />\n            </div>\n          </div>\n          <span class="help-block" *ngIf="filterForm.get(\'from\').touched">\n              <span class="text-danger" *ngIf="filterForm.get(\'from\').hasError(\'maxlength\')">Maximum of 200 characters</span>\n          </span>\n        </div>\n        <div class="row">\n          <div class="col-md-12">\n            <div class="pull-right inline-buttons">\n              <button class="btn btn-secondary btn-sm" type="reset">\n                <i class="fa fa-repeat" aria-hidden="true"></i>\n                Reset\n              </button>\n              <button class="btn btn-primary btn-sm pull-right" type="submit">\n                <i class="fa fa-sort-amount-asc" aria-hidden="true"></i>\n                Filter\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n  \n  <ngx-datatable \n    #table \n    [summaryRow]="enableSummary"\n    [summaryPosition]="summaryPosition"\n    [summaryHeight]="summaryHeight"\n    class="bootstrap" \n    [headerHeight]="50" \n    [columnMode]="\'force\'" \n    [footerHeight]="50" \n    [rowHeight]="\'auto\'"\n    [rows]="page.content" \n    [selected]="selected" \n    [selectionType]="\'checkbox\'" \n    (activate)="onActivate($event)" \n    (select)=\'onSelect($event)\'\n    [count]="page.totalElements" \n    [offset]="page.number" \n    [externalPaging]="true" \n    [limit]="page.size" \n    (page)="loadPage($event, null)">\n    <ngx-datatable-column [summaryFunc]="summaryFunc" [width]="30" [sortable]="false" [canAutoResize]="false" [draggable]="true" [resizeable]="false" [headerCheckboxable]="true"\n      [checkboxable]="true" *ngIf="enableCheckbox">\n    </ngx-datatable-column>\n    <ngx-datatable-column [summaryFunc]="(c.summaryFunc) ? c.summaryFunc : summaryFunc" [canAutoResize]="(c.canAutoResize) ? c.canAutoResize : true" [name]="c.columnName" [width]="c.width"\n      [sortable]="(c.sortable) ? c.sortable : true" [draggable]="(c.draggable) ? c.draggable : true" [resizeable]="(c.resizeable) ? c.resizeable : true"\n      *ngFor="let c of columns">\n      <ng-template let-column="column" ngx-datatable-header-template>\n        <strong>{{c.columnName}}</strong>\n      </ng-template>\n      <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value" let-row="row">\n        <span>\n            {{(c.isDateColumn)? (getFieldValue(row, c.fieldName) | date:\'medium\') : getFieldValue(row, c.fieldName)}}\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <ngx-datatable-column [summaryFunc]="summaryFunc" [name]="moreActions.name" *ngIf="moreActions" [sortable]="false" [canAutoResize]="false">\n      <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value" let-row="row">\n        <span>\n          <div class="input-group-prepend">\n            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true"\n              aria-expanded="false">\n              <i class="fa fa-list-ul" aria-hidden="true"></i>\n            </button>\n            <div class="dropdown-menu">\n              <a class="dropdown-item" *ngFor="let action of moreActions.actions" href="javascript:;" (click)="onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName})">{{action.actionName}}</a>\n              \x3c!-- <a class="dropdown-item" href="#">Another action</a>\n                            <a class="dropdown-item" href="#">Something else here</a>\n                            <div role="separator" class="dropdown-divider"></div>\n                            <a class="dropdown-item" href="#">Separated link</a> --\x3e\n            </div>\n          </div>\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    \x3c!-- <ngx-datatable-column name="Description">\n              <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value" let-row="row">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column>\n            <ngx-datatable-column name="Actions">\n              <ng-template ngx-datatable-cell-template let-rowIndex="rowIndex" let-value="value" let-row="row">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column> --\x3e\n  </ngx-datatable>',styles:[""]}]}],t.ctorParameters=function(){return[{type:e}]},t.propDecorators={columns:[{type:n.Input}],enableCheckbox:[{type:n.Input}],endpoint:[{type:n.Input}],enableSummary:[{type:n.Input}],summaryPosition:[{type:n.Input}],summaryHeight:[{type:n.Input}],moreActions:[{type:n.Input}],onActionsEvent:[{type:n.Output}],filterComponents:[{type:n.Input}],params:[{type:n.Input}],table:[{type:n.ViewChild,args:[i.DatatableComponent]}]},t}(),F=function P(t,e,n){this.name="Actions",this.idFieldName="id",this.actions=t,this.name=n,this.idFieldName=e},E=function(){function e(){}return e.forRoot=function(t){return{ngModule:e,providers:[{provide:u,useValue:t}]}},e.decorators=[{type:n.NgModule,args:[{imports:[s.FormsModule,s.ReactiveFormsModule,i.NgxDatatableModule,c.CommonModule,o.HttpClientModule],declarations:[d,w],exports:[d,w]}]}],e}();t.StewardConfig=u,t.StewardClientService=e,t.StewardClientComponent=d,t.MlkDatatableComponent=w,t.MlkMoreActions=F,t.StewardClientModule=E,t.MlkDynamicControl=g,t.MlkInput=y,t.MlkTextarea=b,t.MlkSelect=v,t.MlkSelectOption=x,t.Page=h,t.Sort=f,t.ResponseWrapper=p,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=steward-client.umd.min.js.map