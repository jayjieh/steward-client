{"version":3,"file":"steward-client.js.map","sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/wrappers/mlk-dynamic-control.ts","ng://steward-client/lib/mlk-datatable/mlk-datatable.component.ts","ng://steward-client/lib/steward-client.module.ts"],"sourcesContent":["/**\n * Wraps server response\n */\nexport class ResponseWrapper<T> {\n    /**\n     * Http status code e.g. 200\n     */\n    code: number;\n    /**\n     * Server message\n     */\n    message: string;\n    /**\n     * Actual response data\n     */\n    data: T;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ResponseWrapper } from './entities/wrappers/response-wrapper';\n\nexport class StewardConfig {\n    base_url: string;\n    access_token?: string;\n    headers?: HttpHeaders;\n}\n\n@Injectable()\nexport class StewardClientService<T, E> {\n\n    private headers: HttpHeaders;\n    token: string;\n    base_url: string = \"/\";\n\n    constructor(private http: HttpClient, config: StewardConfig) {\n        this.base_url = config.base_url;\n        if (config.headers) {\n            this.headers = config.headers.append('Content-Type', 'application/json; charset=utf-8');\n        } else {\n            this.headers = new HttpHeaders({\n                'Content-Type': 'application/json; charset=utf-8'\n            });\n        }\n        if (config.access_token) {//append access token if the environment has access token\n            this.headers = this.headers.append('Authorization', \"Bearer \" + config.access_token);\n        }\n    }\n    /**\n     * Used to handle http post requests\n     */\n    post(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.post(this.base_url + endpoint, JSON.stringify(data), { headers: this.headers }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    /**\n     * Used to handle http post requests\n     */\n    put(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.put(this.base_url + endpoint, JSON.stringify(data), { headers: this.headers }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    delete(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        return this.http.request('delete', this.base_url + endpoint, { headers: this.headers, body: JSON.stringify(data) }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    get(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n        const options = {\n            headers: this.headers,\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n\n    getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n        const options = {\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint + '?access_token=' + this.token, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n    /**\n     * if\n     * @param endpoint \n     * @param data \n     * @param headers \n     */\n    postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            formData.append(key, data[key]);\n        });\n        if(this.headers.get(\"Authorization\") && (!headers)){\n            headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.token });\n        } else if(!headers){\n            headers = new HttpHeaders();\n        }\n        return this.http.post(this.base_url + endpoint, formData, { headers: headers}).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            if (Array.isArray(data[key])) {\n                data[key].forEach(k2 => {\n                    formData.append(key, k2);\n                });\n            } else {\n                formData.append(key, data[key]);\n            }\n        });\n        return this.http.post(this.base_url + endpoint, formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n        const formData: FormData = new FormData();\n        Object.keys(data).forEach((key) => {\n            if (Array.isArray(data[key])) {\n                data[key].forEach(k2 => {\n                    formData.append(key, k2);\n                });\n            } else {\n                formData.append(key, data[key]);\n            }\n        });\n        return this.http.put(this.base_url + endpoint, formData, { headers: new HttpHeaders({ 'Authorization': 'Bearer ' + this.token }) }).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n\n    private getHttpParams(data: Map<string, string>): HttpParams {\n        if (data == undefined) {\n            return new HttpParams();\n        }\n        let httpParams: HttpParams = new HttpParams();\n        data.forEach((value: string, key: string) => {\n            httpParams = httpParams.append(key, value);\n        });\n        return httpParams;\n    }\n    /**\n     * Used to catch exception thrown by http client returns internal server error\n     * if status 500 is encountered\n     */\n    private handleError<ResponseWrapper>() {\n        return (error: HttpErrorResponse): Observable<any> => {\n            const res = new ResponseWrapper();\n            //            console.error(error); // log to console instead\n            if (error.status == 500) {\n                res.code = error.status;\n                res.message = 'Sorry internal server error occured please try again later';\n            } else {\n                res.code = error.status;\n                res.message = error.error.message;\n                res.data = error.error.data;\n            }\n            return of(res);\n        };\n    }\n    /**\n     * Used to render action buttons\n     */\n    static renderMore(id: any) {\n        return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\n    }\n\n    public intiateDataTable(endpoint: string, data?: Map<string, string>) {\n        const options = {\n            headers: this.headers,\n            params: this.getHttpParams(data)\n        };\n        return this.http.get(this.base_url + endpoint, options).pipe(\n            catchError(this.handleError<any>())\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'stw-steward-client',\n  template: `\n    <p>\n      steward-client works!\n    </p>\n  `,\n  styles: []\n})\nexport class StewardClientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/**\n * Datable page used to wrapper server content response\n */\nexport class Page<T> {\n    /**\n     * Number of items per page same as limit\n     */\n    size: number = 10;\n    /**\n     * Total items available on the server\n     */\n    totalElements: number = 0;\n    /**\n     * Total number of pages present\n     */\n    totalPages: number = 0;\n    /**\n     * Checks if is the first page\n     */\n    first: boolean = true;\n    /**\n     * Checks if it is the last page\n     */\n    last: boolean = false;\n    /**\n     * The actual page content\n     */\n    content: Array<T> = [];\n    /**\n     * Used to map sort parameters\n     */\n    sorted: Sort = new Sort();\n    /**\n     * Current page number\n     */\n    number: number = 0;\n}\n/**\n * used to map sort request\n */\nexport class Sort{\n    sorted: boolean = false;\n    unsorted: boolean = true;\n}\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class MlkDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (MlkInput, MlkTextArea & MlkSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = true, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class MlkInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string = \"text\";\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class MlkTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class MlkSelect {\n    /**\n     * Select options\n     */\n    options: Array<MlkSelectOption>;\n\n    constructor(options: Array<MlkSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class MlkSelectOption{\n    /**\n     * Option value\n     */\n    value: string;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import { Component, OnInit, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Page } from '../entities/wrappers/page';\nimport { MlkDynamicControl, MlkInput, MlkTextarea, MlkSelect } from '../entities/wrappers/mlk-dynamic-control';\nimport { ResponseWrapper } from '../entities/wrappers/response-wrapper';\nimport { StewardClientService } from '../steward-client.service';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { Queue } from 'queue-typescript';\n//const { Queue } = require('queue-typescript');\n\n@Component({\n  selector: 'stw-mlk-datatable',\n  template: `<div class=\"card card-outline-default\" *ngIf=\"enableFilterHeader\">\n    <div class=\"card-body\">\n      <form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\n        <div class=\"row\">\n          <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\n            <label for=\"from\">{{control.label}}: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i [class]=\"control.icon\"></i>\n                </span>\n              </div>\n  \n              <select *ngIf=\"isSelect(control.controlType)\" class=\"form-control form-control-sm checking-field\" [formControlName]=\"control.name\">\n                <option value=\"\" disabled selected>{{control.placeholder}}</option>\n                <option *ngFor=\"let o of control.controlType.options\">{{o.text}}</option>\n              </select>\n  \n              <textarea *ngIf=\"isTextArea(control.controlType)\" [cols]=\"control.controlType.cols\" [rows]=\"control.controlType.rows\" class=\"form-control form-control-sm checking-field\"\n                [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\n  \n              <input *ngIf=\"isInput(control.controlType)\" [type]=\"control.controlType.type\" [placeholder]=\"control.placeholder\" class=\"form-control form-control-sm checking-field\"\n                [formControlName]=\"control.name\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get(control.name).touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}} is required</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of {{control.controlType.minLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of {{control.controlType.maxLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than {{control.controlType.min}}</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than {{control.controlType.max}}</span>\n            </span>\n          </div>\n          <div *ngIf=\"enableDefaultTableHeader\">\n          <div class=\"col-md-3  mb-3\">\n            <label for=\"from\">From: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n              </div>\n              <input type=\"date\" placeholder=\"From...\" class=\"form-control form-control-sm checking-field\"\n                formControlName=\"from\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n                <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 100 characters</span>\n            </span>\n          </div>\n          <div class=\"col-md-3  mb-3\">\n            <label for=\"from\">To: </label>\n            <div class=\"input-group\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n              </div>\n              <input type=\"date\" placeholder=\"To...\" class=\"form-control form-control-sm checking-field\"\n                formControlName=\"to\" value=\"\" />\n            </div>\n            <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n                <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 100 characters</span>\n            </span>\n          </div>\n          <div class=\"col-md-3 mb-3\">\n            <label for=\"search\">Search:</label>\n            <div class=\"input-group\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-search\"></i>\n                </span>\n              </div>\n              <input formControlName=\"needle\" class=\"form-control form-control-sm checking-field\" type=\"text\"\n                placeholder=\"Search...\" (keyup)=\"updateFilter($event)\" />\n            </div>\n          </div>\n          <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\n          </span>\n        </div>\n        </div>\n          <div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"pull-right inline-buttons\">\n                  <button class=\"btn btn-warning btn-sm\" type=\"reset\">\n                    <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n                    Reset\n                  </button>\n                  <button class=\"btn btn-success btn-sm pull-right\" type=\"submit\">\n                    <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\n                    Filter\n                  </button>\n                </div>\n              </div>\n            </div>\n        </div>\n      </form>\n    </div>\n  </div>\n  \n  <ngx-datatable \n    #table \n    [summaryRow]=\"enableSummary\"\n    [summaryPosition]=\"summaryPosition\"\n    [summaryHeight]=\"summaryHeight\"\n    class=\"bootstrap\" \n    [headerHeight]=\"50\" \n    [columnMode]=\"'force'\" \n    [footerHeight]=\"50\" \n    [rowHeight]=\"'auto'\"\n    [rows]=\"page.content\" \n    [selected]=\"selected\" \n    [selectionType]=\"'checkbox'\" \n    (activate)=\"onActivate($event)\" \n    (select)='onSelect($event)'\n    [count]=\"page.totalElements\" \n    [offset]=\"page.number\" \n    [externalPaging]=\"true\" \n    [limit]=\"page.size\" \n    (page)=\"loadPage($event, null)\">\n    <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\" [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\n      [checkboxable]=\"true\" *ngIf=\"enableCheckbox\">\n    </ngx-datatable-column>\n    <ngx-datatable-column [summaryFunc]=\"(c.summaryFunc) ? c.summaryFunc : summaryFunc\" [canAutoResize]=\"(c.canAutoResize) ? c.canAutoResize : true\" [name]=\"c.columnName\" [width]=\"c.width\"\n      [sortable]=\"(c.sortable) ? c.sortable : true\" [draggable]=\"(c.draggable) ? c.draggable : true\" [resizeable]=\"(c.resizeable) ? c.resizeable : true\"\n      *ngFor=\"let c of columns\">\n      <ng-template let-column=\"column\" ngx-datatable-header-template>\n        <strong>{{c.columnName}}</strong>\n      </ng-template>\n      <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n            {{(c.isDateColumn)? (getFieldValue(row, c.fieldName) | date:'medium') : getFieldValue(row, c.fieldName)}}\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [name]=\"moreActions.name\" *ngIf=\"moreActions\" [sortable]=\"false\" [canAutoResize]=\"false\">\n      <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n          <div class=\"input-group-prepend\">\n            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n              aria-expanded=\"false\">\n              <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\n            </button>\n            <div class=\"dropdown-menu\">\n              <a class=\"dropdown-item\" *ngFor=\"let action of moreActions.actions\" href=\"javascript:;\" (click)=\"onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName, actionRow: row})\">{{action.actionName}}</a>\n              <!-- <a class=\"dropdown-item\" href=\"#\">Another action</a>\n                            <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n                            <div role=\"separator\" class=\"dropdown-divider\"></div>\n                            <a class=\"dropdown-item\" href=\"#\">Separated link</a> -->\n            </div>\n          </div>\n        </span>\n      </ng-template>\n    </ngx-datatable-column>\n    <!-- <ngx-datatable-column name=\"Description\">\n              <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column>\n            <ngx-datatable-column name=\"Actions\">\n              <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n                <span>\n                  {{value}}\n                </span>\n              </ng-template>\n            </ngx-datatable-column> -->\n  </ngx-datatable>`,\n  styles: [``]\n})\nexport class MlkDatatableComponent implements OnInit {\n  @Input() columns: Array<MlkDataTableColumn> = [];\n  @Input() enableCheckbox: boolean = false;\n  @Input() endpoint: string;\n  @Input() enableFilterHeader: boolean = false;\n  @Input() enableDefaultTableHeader: boolean = false;\n  @Input() enableSummary: boolean = false;\n  @Input() summaryPosition: string = \"'bottom'\";\n  @Input() summaryHeight: string = \"'auto'\";\n  @Input() moreActions: MlkMoreActions;\n  @Output() onActionsEvent = new EventEmitter<MlkMoreActionData>()\n  @Input() filterComponents: Array<MlkDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  page: Page<any> = new Page();\n  selected = [];\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  emptySummaryFunc: () => null;\n  ;\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    let group = {};\n    this.filterComponents.forEach(comp => {\n      let validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if(comp.controlType instanceof MlkInput || comp.controlType instanceof MlkTextarea){\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if(comp.controlType instanceof MlkInput){\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators)\n    });\n    //add default controls\n    group['from'] = new FormControl('', Validators.maxLength(100));\n    group['to'] = new FormControl('', Validators.maxLength(100));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({ offset: 0, limit: this.page.size }, null);\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event\n   */\n  onActionClick(event: MlkMoreActionData) {\n    this.onActionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   * @param pageInfo\n   * @param filters\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if(this.params){\n      this.params.forEach((value, key)=>{\n        request.set(key, value);\n      });\n    }\n    request.set(\"page\", pageInfo.offset);\n    request.set(\"size\", pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request).subscribe(response => {\n      if (response.code == 200) {\n        this.page = response.data;\n      }\n    });\n\n  }\n\n  /**\n   * Used to handle select option\n   * @param event\n   */\n  onSelect(event) {\n\n  }\n\n  onActivate(event) {\n\n  }\n\n  updateFilter(event) {\n\n  }\n\n  /**\n   * Used to process table filter. If date filter is not provide the from value is \n   * set to 2018-01-01 and to value is set to 1 year from today\n   * @param form \n   */\n  processFilter(form) {\n    //@ts-ignore\n    let f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\n    //validate date \n    if(!this.filterForm.get('from').touched){//if from is not populated remove from request\n      f.delete('from');\n      // this.filterForm.get('from').setValue('2018-01-01');\n    }\n    if(!this.filterForm.get('to').touched){//if to is not populated remove from request\n      f.delete('to');\n      // let toDate = new Date();\n      // toDate.setDate(toDate.getFullYear() + 1);\n      // this.filterForm.get('to').setValue(this.getFormattedDate(toDate));\n    }\n\n    this.loadPage({ offset: this.page.number, limit: this.page.size }, f);\n  }\n\n  /**\n   * Used to check if miliki control is input\n   * @param control\n   */\n  isInput(control: any) {\n    return control instanceof MlkInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   * @param control\n   */\n  isSelect(control: any) {\n    return control instanceof MlkSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof MlkTextarea;\n  }\n\n  summaryFunc(cell: any) {\n    return(``);\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date\n   */\n  getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n  getFieldValue(data: Object, field: any){\n    var k: Array<string> = field.split(\".\");\n    var keys = new Queue<string>(...k);\n    let value = this.getObjectValue(data, keys);\n    return value;\n  }\n\n  /**\n   * Used to find key value based on the key sequence provided\n   * @param data expects an object\n   * @param keys i.e. user.gender.type.type\n   */\n  getObjectValue(data: any, keys: Queue<string>) {\n    if ((!(data instanceof Object)) || (keys.length == 1))  {\n      return data[keys.tail];\n    }\n    let value = null;\n    Object.keys(data).forEach((key) => {\n      if ((key == keys.front) && (data[key] instanceof Object)) {\n        value = this.getObjectValue(data[key], keys);\n      } else if(key == keys.tail){\n        value = data[key];\n      }\n    });\n    return value;\n\n  }\n\n}\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn, summaryFunc)\n */\nexport interface MlkDataTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  canAutoResize?: boolean;\n  /**\n   * Enables a column to be draggable\n   */\n  draggable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n  /**\n   * Function to call at the summary row\n   */\n  summaryFunc?: (any: any[]) => any;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class MlkMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name: string = \"Actions\";\n  /**\n   * Field name id from the server response e.g userId\n   */\n  idFieldName: string = \"id\";\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<MlkMoreActionData>;\n\n  constructor(actions: Array<MlkMoreActionData>, id?: string, name?: string) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n  }\n\n}\n\nexport interface MlkMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n\n  /**\n   * Action row : the clicked row\n   */\n  actionRow?: any;\n}","import { NgModule } from '@angular/core';\nimport { StewardClientComponent } from './steward-client.component';\nimport { MlkDatatableComponent } from './mlk-datatable/mlk-datatable.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StewardConfig } from './steward-client.service';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    NgxDatatableModule,\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [StewardClientComponent, MlkDatatableComponent],\n  exports: [StewardClientComponent, MlkDatatableComponent]\n})\nexport class StewardClientModule {\n  static forRoot(config: StewardConfig) {\n    return {\n      ngModule: StewardClientModule,\n      providers: [ {provide: StewardConfig, useValue: config} ]\n    }\n  }\n }\n"],"names":[],"mappings":"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"}
