{"version":3,"file":"steward-client.js.map","sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/wrappers/mlk-dynamic-control.ts","ng://steward-client/lib/mlk-datatable/mlk-datatable.component.ts","ng://steward-client/lib/steward-client.module.ts"],"sourcesContent":["/**\r\n * Wraps server response\r\n */\r\nexport class ResponseWrapper<T> {\r\n    /**\r\n     * Http status code e.g. 200\r\n     */\r\n    code: number;\r\n    /**\r\n     * Server message\r\n     */\r\n    message: string;\r\n    /**\r\n     * Actual response data\r\n     */\r\n    data: T;\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Observable, of} from 'rxjs';\r\nimport {catchError} from 'rxjs/operators';\r\nimport {ResponseWrapper} from './entities/wrappers/response-wrapper';\r\n\r\nexport class StewardConfig {\r\n  base_url: string;\r\n  access_token?: string;\r\n  headers?: HttpHeaders;\r\n}\r\n\r\n@Injectable()\r\nexport class StewardClientService<T, E> {\r\n\r\n  private headers: HttpHeaders;\r\n  token: string;\r\n  base_url = '/';\r\n\r\n  constructor(private http: HttpClient, private config: StewardConfig) {\r\n    this.base_url = config.base_url;\r\n    if (config.headers) {\r\n      this.headers = config.headers;\r\n    } else {\r\n      this.headers = new HttpHeaders({\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n        'Authorization': 'Bearer ' + localStorage.getItem('access_token')\r\n      });\r\n    }\r\n    if (config.access_token) {// append access token if the environment has access token\r\n      this.headers = this.headers.append('Authorization', 'Bearer ' + config.access_token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used to handle http post requests\r\n   */\r\n  post(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    return this.http.post(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8')}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Used to handle http post requests\r\n   */\r\n  put(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    return this.http.put(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8')}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  delete(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    return this.http.request('delete', this.base_url + endpoint, {\r\n      headers: this.headers.append('Content-Type', 'application/json; charset=utf-8'),\r\n      body: JSON.stringify(data)\r\n    }).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  get(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\r\n    const options = {\r\n      headers: this.headers,\r\n      params: this.getHttpParams(data)\r\n    };\r\n    return this.http.get(this.base_url + endpoint, options).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * if\r\n   * @param endpoint\r\n   * @param data\r\n   * @param headers\r\n   */\r\n  postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\r\n    const formData: FormData = new FormData();\r\n    Object.keys(data).forEach((key) => {\r\n      formData.append(key, data[key]);\r\n    });\r\n    if (this.headers.get('Authorization') && (!headers)) {\r\n      headers = this.headers;\r\n    } else if (!headers) {\r\n      headers = new HttpHeaders();\r\n    }\r\n    return this.http.post(this.base_url + endpoint, formData, {headers: headers}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\r\n    const formData: FormData = new FormData();\r\n    Object.keys(data).forEach((key) => {\r\n      if (Array.isArray(data[key])) {\r\n        data[key].forEach(k2 => {\r\n          formData.append(key, k2);\r\n        });\r\n      } else {\r\n        formData.append(key, data[key]);\r\n      }\r\n    });\r\n    return this.http.post(this.base_url + endpoint, formData, {headers: new HttpHeaders({'Authorization': 'Bearer ' + localStorage.getItem('access_token')})}).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  private getHttpParams(data: Map<string, string>): HttpParams {\r\n    if (data === undefined) {\r\n      return new HttpParams();\r\n    }\r\n    let httpParams: HttpParams = new HttpParams();\r\n    data.forEach((value: string, key: string) => {\r\n      httpParams = httpParams.append(key, value);\r\n    });\r\n    return httpParams;\r\n  }\r\n\r\n  /**\r\n   * Used to catch exception thrown by http client returns internal server error\r\n   * if status 500 is encountered\r\n   */\r\n  private handleError<ResponseWrapper>() {\r\n    return (error: HttpErrorResponse): Observable<any> => {\r\n      const res = new ResponseWrapper();\r\n      //            console.error(error); // log to console instead\r\n      if (error.status === 500) {\r\n        res.code = error.status;\r\n        res.message = 'Sorry internal server error occured please try again later';\r\n      } else {\r\n        res.code = error.status;\r\n        res.message = error.error.message;\r\n        res.data = error.error.data;\r\n      }\r\n      return of(res);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Used to render action buttons\r\n   */\r\n  static renderMore(id: any) {\r\n    return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\r\n  }\r\n\r\n  public intiateDataTable(endpoint: string, data?: Map<string, string>) {\r\n    const options = {\r\n      headers: this.headers,\r\n      params: this.getHttpParams(data)\r\n    };\r\n    return this.http.get(this.base_url + endpoint, options).pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'stw-steward-client',\r\n  template: `\r\n    <p>\r\n      steward-client works!\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class StewardClientComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","/**\r\n * Datable page used to wrapper server content response\r\n */\r\nexport class Page<T> {\r\n    /**\r\n     * Number of items per page same as limit\r\n     */\r\n    size: number = 10;\r\n    /**\r\n     * Total items available on the server\r\n     */\r\n    totalElements: number = 0;\r\n    /**\r\n     * Total number of pages present\r\n     */\r\n    totalPages: number = 0;\r\n    /**\r\n     * Checks if is the first page\r\n     */\r\n    first: boolean = true;\r\n    /**\r\n     * Checks if it is the last page\r\n     */\r\n    last: boolean = false;\r\n    /**\r\n     * The actual page content\r\n     */\r\n    content: Array<T> = [];\r\n    /**\r\n     * Used to map sort parameters\r\n     */\r\n    sorted: Sort = new Sort();\r\n    /**\r\n     * Current page number\r\n     */\r\n    number: number = 0;\r\n}\r\n/**\r\n * used to map sort request\r\n */\r\nexport class Sort{\r\n    sorted: boolean = false;\r\n    unsorted: boolean = true;\r\n}\r\n","/**\r\n * Represents dynamic html controls (Input, TextArea and Select)\r\n */\r\nexport class MlkDynamicControl<T> {\r\n    /**\r\n     * Control label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Icon to be appended before the control (supports class defined icons)\r\n     */\r\n    icon: string;\r\n    /**\r\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\r\n     */\r\n    name: string;\r\n    /**\r\n     * The actual control (MlkInput, MlkTextArea & MlkSelect)\r\n     */\r\n    controlType: T;\r\n    /**\r\n     * Checks if the field is required\r\n     */\r\n    isRequired: boolean;\r\n    /**\r\n     * Control placeholder\r\n     */\r\n    placeholder: string = \"\";\r\n\r\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\r\n        isRequired: boolean = true, placeholder: string = null) {\r\n        this.label = label;\r\n        this.name = name;\r\n        this.controlType = controlType;\r\n        this.icon = icon;\r\n        this.isRequired = isRequired;\r\n        this.placeholder = placeholder ? placeholder : label;\r\n    }\r\n\r\n}\r\n/**\r\n * Used to represent html input with options:\r\n * type: default to text,  maxLength, minLength, min, max\r\n */\r\nexport class MlkInput{\r\n    /**\r\n     * Type of input e.g. text, number, date\r\n     */\r\n    type: string = \"text\";\r\n    /**\r\n     * Used to validate length of the input\r\n     */\r\n    maxLength: number;\r\n    /**\r\n     * Used to validate minimum input length\r\n     */\r\n    minLength: number;\r\n    /**\r\n     * Used to validate number inputs\r\n     */\r\n    min: number;\r\n    /**\r\n     * Used to validate number inputs\r\n     */\r\n    max: number;\r\n\r\n    constructor(type: string = \"text\") {\r\n        this.type = type;\r\n        this.minLength = this.min = 0;\r\n        this.maxLength = 4000;\r\n        this.max = 1000000000;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents html textarea input\r\n */\r\nexport class MlkTextarea{\r\n    /**\r\n     * Number textarea columns\r\n     */\r\n    cols?: number;\r\n    /**\r\n     * Number of textarea rows\r\n     */\r\n    rows?: number;\r\n    /**\r\n     * Validate maximum input length\r\n     */\r\n    maxLength: number;\r\n    /**\r\n     * Validate minimum input length\r\n     */\r\n    minLength: number;\r\n\r\n    constructor(cols: number = 5, rows: number = 1){\r\n        this.cols = cols;\r\n        this.rows = rows;\r\n        this.maxLength = 4000;\r\n        this.minLength = 0\r\n    }\r\n}\r\n\r\n/**\r\n * Represents html select control\r\n */\r\nexport class MlkSelect {\r\n    /**\r\n     * Select options\r\n     */\r\n    options: Array<MlkSelectOption>;\r\n\r\n    constructor(options: Array<MlkSelectOption>){\r\n        this.options = options;\r\n    }\r\n\r\n}\r\n\r\nexport class MlkSelectOption{\r\n    /**\r\n     * Option value\r\n     */\r\n    value: string;\r\n    /**\r\n     * Option text/label\r\n     */\r\n    text: string;\r\n\r\n    constructor(value: string, text: string = null){\r\n        this.value = value;\r\n        this.text = text ? text : value;\r\n    }\r\n\r\n}\r\n\r\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Page} from '../entities/wrappers/page';\r\nimport {MlkDynamicControl, MlkInput, MlkSelect, MlkTextarea} from '../entities/wrappers/mlk-dynamic-control';\r\nimport {ResponseWrapper} from '../entities/wrappers/response-wrapper';\r\nimport {StewardClientService} from '../steward-client.service';\r\nimport {DatatableComponent} from '@swimlane/ngx-datatable';\r\nimport {Queue} from 'queue-typescript';\r\n\r\n// const { Queue } = require('queue-typescript');\r\n\r\n@Component({\r\n  selector: 'stw-mlk-datatable',\r\n  template: `<div class=\"card card-outline-default\" *ngIf=\"enableFilterHeader\">\r\n  <div class=\"card-body\">\r\n    <form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\r\n          <label>{{control.label}}: </label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-append\">\r\n                <span class=\"input-group-text  form-icon-default\">\r\n                  <i [class]=\"control.icon\"></i>\r\n                </span>\r\n            </div>\r\n\r\n            <select *ngIf=\"isSelect(control.controlType)\" class=\"form-control form-control-sm checking-field\"\r\n                    [formControlName]=\"control.name\">\r\n              <option value=\"\" disabled selected>{{control.placeholder}}</option>\r\n              <option *ngFor=\"let o of control.controlType.options\">{{o.text}}</option>\r\n            </select>\r\n\r\n            <textarea *ngIf=\"isTextArea(control.controlType)\" [cols]=\"control.controlType.cols\"\r\n                      [rows]=\"control.controlType.rows\" class=\"form-control form-control-sm checking-field\"\r\n                      [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\r\n\r\n            <input *ngIf=\"isInput(control.controlType)\" [type]=\"control.controlType.type\"\r\n                   [placeholder]=\"control.placeholder\" class=\"form-control form-control-sm checking-field\"\r\n                   [formControlName]=\"control.name\"/>\r\n          </div>\r\n          <span class=\"help-block\" *ngIf=\"filterForm.get(control.name).touched\">\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}} is required</span>\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of {{control.controlType.minLength}}\r\n                characters</span>\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of {{control.controlType.maxLength}}\r\n                characters</span>\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than {{control.controlType.min}}</span>\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than {{control.controlType.max}}</span>\r\n            </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\" *ngIf=\"enableDefaultTableHeader\">\r\n        <div class=\"col-md-3 mb-3\">\r\n          <label>From: </label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-append\">\r\n                <span class=\"input-group-text form-icon-default\">\r\n                  <i class=\"fa fa-calendar-o\"></i>\r\n                </span>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-sm checking-field\"\r\n              id=\"inputTravelDate\"\r\n              formControlName=\"from\"\r\n              placeholder=\"From...\"\r\n              #dpfrom=\"bsDatepicker\"\r\n              bsDatepicker\r\n              [outsideClick]=\"false\"\r\n              [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\r\n              maxlength=\"30\"\r\n              required\r\n              readonly\r\n            />\r\n            <div class=\"input-group-append\">\r\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpfrom.toggle()\"\r\n                      [attr.aria-expanded]=\"dpfrom.isOpen\"><i class=\"fa fa-th\"></i></button>\r\n            </div>\r\n          </div>\r\n          <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\r\n                <span class=\"text-danger\"\r\n                      *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 30 characters</span>\r\n            </span>\r\n        </div>\r\n        <div class=\"col-md-3 mb-3\">\r\n          <label>To: </label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-append\">\r\n                <span class=\"input-group-text form-icon-default\">\r\n                  <i class=\"fa fa-calendar-o\"></i>\r\n                </span>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control form-control-sm checking-field\"\r\n              id=\"inputTravelDate\"\r\n              formControlName=\"to\"\r\n              placeholder=\"To...\"\r\n              #dpto=\"bsDatepicker\"\r\n              bsDatepicker\r\n              [outsideClick]=\"false\"\r\n              [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\r\n              maxlength=\"30\"\r\n              required\r\n              readonly\r\n            />\r\n            <div class=\"input-group-append\">\r\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpto.toggle()\" [attr.aria-expanded]=\"dpto.isOpen\">\r\n                <i class=\"fa fa-th\"></i></button>\r\n            </div>\r\n          </div>\r\n          <span class=\"help-block\" *ngIf=\"filterForm.get('to').touched\">\r\n                <span class=\"text-danger\"\r\n                      *ngIf=\"filterForm.get('to').hasError('maxlength')\">Maximum of 30 characters</span>\r\n            </span>\r\n        </div>\r\n        <div class=\"col-md-3 mb-3\">\r\n          <label>Search:</label>\r\n          <div class=\"input-group\">\r\n            <div class=\"input-group-prepend\">\r\n                <span class=\"input-group-text form-icon-default\">\r\n                  <i class=\"fa fa-search\"></i>\r\n                </span>\r\n            </div>\r\n            <input formControlName=\"needle\" class=\"form-control form-control-sm checking-field\" type=\"text\"\r\n                   placeholder=\"Search...\" (keyup)=\"updateFilter($event)\"/>\r\n          </div>\r\n        </div>\r\n        <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\r\n              <span class=\"text-danger\"\r\n                    *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\r\n          </span>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"pull-right inline-buttons\">\r\n            <button class=\"btn btn-warning btn-sm\" type=\"reset\">\r\n              <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\r\n              Reset\r\n            </button>\r\n            <button class=\"btn btn-success btn-sm pull-right\" type=\"submit\">\r\n              <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\r\n              Filter\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n<ngx-datatable\r\n  #table\r\n  [rowHeight]=\"tableRowHeight\"\r\n  [footerHeight]=\"tableFooterHeight\"\r\n  [headerHeight]=\"tableHeaderHeight\"\r\n  [scrollbarV]=\"verticalScrollActive\"\r\n  [scrollbarH]=\"horizontalScrollActive\"\r\n  [summaryRow]=\"enableSummary\"\r\n  [summaryPosition]=\"summaryPosition\"\r\n  [summaryHeight]=\"summaryHeight\"\r\n  class=\"bootstrap\"\r\n  [columnMode]=\"'force'\"\r\n  [rows]=\"page.content\"\r\n  [selected]=\"selected\"\r\n  [selectionType]=\"'checkbox'\"\r\n  (activate)=\"onActivate($event)\"\r\n  (select)='onSelect($event)'\r\n  [count]=\"page.totalElements\"\r\n  [offset]=\"page.number\"\r\n  [externalPaging]=\"true\"\r\n  [limit]=\"page.size\"\r\n  (page)=\"loadPage($event, null)\">\r\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\"\r\n                        [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\r\n                        [checkboxable]=\"true\" *ngIf=\"enableCheckbox\">\r\n  </ngx-datatable-column>\r\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\"\r\n                        [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\r\n                        *ngFor=\"let c of columns; index as i;\">\r\n    <ng-template let-column=\"column\" ngx-datatable-header-template *ngIf=\"i==0\">\r\n      <strong>#</strong>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-row=\"row\" *ngIf=\"i==0\">\r\n        <span>\r\n            {{rowIndex + 1}}\r\n        </span>\r\n    </ng-template>\r\n  </ngx-datatable-column>\r\n  <ngx-datatable-column [summaryFunc]=\"(c.summaryFunc) ? c.summaryFunc : summaryFunc\"\r\n                        [canAutoResize]=\"(c.canAutoResize) ? c.canAutoResize : true\" [name]=\"c.columnName\"\r\n                        [width]=\"c.width\"\r\n                        [sortable]=\"(c.sortable) ? c.sortable : true\" [draggable]=\"(c.draggable) ? c.draggable : true\"\r\n                        [resizeable]=\"(c.resizeable) ? c.resizeable : true\"\r\n                        *ngFor=\"let c of columns; index as i;\">\r\n    <ng-template let-column=\"column\" ngx-datatable-header-template *ngIf=\"i==0\">\r\n      <strong>{{c.columnName}}</strong>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\" *ngIf=\"i==0\">\r\n        <span>\r\n            <ng-container *ngIf=\"c.isDateColumn; then t10\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && c.currencyText; then t40\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && !c.currencyText; then t70\"></ng-container>\r\n            <ng-container *ngIf=\"!c.isDateColumn && !c.isCurrencyColumn; then t70\"></ng-container>\r\n\r\n            <ng-template #t10>\r\n                {{(getFieldValue(row, c.fieldName) | date:'medium')}}\r\n            </ng-template>\r\n            <ng-template #t40>\r\n                {{(getFieldValue(row, c.fieldName) | currency:c.currencyText:'code')}}\r\n            </ng-template>\r\n            <ng-template #t70>\r\n                {{getFieldValue(row, c.fieldName)}}\r\n            </ng-template>\r\n        </span>\r\n    </ng-template>\r\n\r\n    <ng-template let-column=\"column\" ngx-datatable-header-template>\r\n      <strong>{{c.columnName}}</strong>\r\n    </ng-template>\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n        <span>\r\n            <ng-container *ngIf=\"c.isDateColumn; then t10\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && c.currencyText; then t40\"></ng-container>\r\n            <ng-container *ngIf=\"c.isCurrencyColumn && !c.currencyText; then t70\"></ng-container>\r\n            <ng-container *ngIf=\"!c.isDateColumn && !c.isCurrencyColumn; then t70\"></ng-container>\r\n\r\n            <ng-template #t10>\r\n                {{(getFieldValue(row, c.fieldName) | date:'medium')}}\r\n            </ng-template>\r\n            <ng-template #t40>\r\n                {{(getFieldValue(row, c.fieldName) | currency:c.currencyText:'code')}}\r\n            </ng-template>\r\n            <ng-template #t70>\r\n                {{getFieldValue(row, c.fieldName)}}\r\n            </ng-template>\r\n        </span>\r\n    </ng-template>\r\n  </ngx-datatable-column>\r\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [name]=\"moreActions.name\" *ngIf=\"moreActions\" [sortable]=\"false\"\r\n                        [canAutoResize]=\"false\">\r\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\r\n        <span>\r\n          <div class=\"input-group-prepend\">\r\n            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded=\"false\">\r\n              <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            <div class=\"dropdown-menu\">\r\n              <a class=\"dropdown-item\" *ngFor=\"let action of moreActions.actions\" href=\"javascript:;\"\r\n                 (click)=\"onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName, actionRow: row})\">{{action.actionName}}</a>\r\n            </div>\r\n          </div>\r\n        </span>\r\n    </ng-template>\r\n  </ngx-datatable-column>\r\n</ngx-datatable>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class MlkDatatableComponent implements OnInit {\r\n  @Input() tableRowHeight = 50;\r\n  @Input() tableFooterHeight = 50;\r\n  @Input() tableHeaderHeight = 50;\r\n  @Input() verticalScrollActive = false;\r\n  @Input() horizontalScrollActive = false;\r\n  @Input() columns: Array<MlkDataTableColumn> = [];\r\n  @Input() enableCheckbox = false;\r\n  @Input() endpoint: string;\r\n  @Input() enableFilterHeader = false;\r\n  @Input() enableDefaultTableHeader = false;\r\n  @Input() enableSummary = false;\r\n  @Input() summaryPosition = '\\'bottom\\'';\r\n  @Input() summaryHeight = '\\'auto\\'';\r\n  @Input() moreActions: MlkMoreActions;\r\n  @Output() onActionsEvent = new EventEmitter<MlkMoreActionData>();\r\n  @Input() filterComponents: Array<MlkDynamicControl<any>> = [];\r\n  @Input() params: Map<string, any>;\r\n  page: Page<any> = new Page();\r\n  selected = [];\r\n  @Output() onSelected = new EventEmitter<Array<any>>();\r\n  @ViewChild(DatatableComponent) table: DatatableComponent;\r\n  filter: Object = {};\r\n  filterForm: FormGroup;\r\n  emptySummaryFunc: () => null;\r\n\r\n\r\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\r\n  }\r\n\r\n  /**\r\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\r\n   */\r\n  ngOnInit() {\r\n    const group = {};\r\n    this.filterComponents.forEach(comp => {\r\n      const validators: Array<any> = [];\r\n      if (comp.isRequired) {\r\n        validators.push(Validators.required);\r\n      }\r\n\r\n      if (comp.controlType instanceof MlkInput || comp.controlType instanceof MlkTextarea) {\r\n        validators.push(Validators.minLength(comp.controlType.minLength));\r\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\r\n      }\r\n\r\n      if (comp.controlType instanceof MlkInput) {\r\n        validators.push(Validators.max(comp.controlType.max));\r\n        validators.push(Validators.min(comp.controlType.min));\r\n      }\r\n      group[comp.name] = new FormControl('', validators);\r\n    });\r\n    // add default controls\r\n    group['from'] = new FormControl('', Validators.maxLength(30));\r\n    group['to'] = new FormControl('', Validators.maxLength(30));\r\n    group['needle'] = new FormControl('', Validators.maxLength(200));\r\n    this.filterForm = new FormGroup(group);\r\n    this.loadPage({offset: 0, limit: this.page.size}, null);\r\n  }\r\n\r\n  /**\r\n   * Used to emit click event of the actions\r\n   * @param event\r\n   */\r\n  onActionClick(event: MlkMoreActionData) {\r\n    this.onActionsEvent.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Process server request of datable\r\n   * @param pageInfo\r\n   * @param filters\r\n   */\r\n  loadPage(pageInfo, filters) {\r\n    if (!this.endpoint) {\r\n      return;\r\n    }\r\n    let request: Map<string, any>;\r\n    if (filters) {\r\n      request = filters;\r\n    } else {\r\n      request = new Map();\r\n    }\r\n    if (this.params) {\r\n      this.params.forEach((value, key) => {\r\n        request.set(key, value);\r\n      });\r\n    }\r\n    request.set('page', pageInfo.offset);\r\n    request.set('size', pageInfo.limit);\r\n    this.sterwardService.get(this.endpoint, request).subscribe(response => {\r\n      if (response.code === 200) {\r\n        this.page = response.data;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Used to handle select option\r\n   * @param event\r\n   */\r\n  onSelect({selected}) {\r\n    console.log('Select Event', selected, this.selected);\r\n\r\n    this.selected.splice(0, this.selected.length);\r\n    this.selected.push(...selected);\r\n    this.onSelected.emit(this.selected);\r\n  }\r\n\r\n  onActivate(event) {\r\n\r\n  }\r\n\r\n  updateFilter(event) {\r\n\r\n  }\r\n\r\n  /**\r\n   * Used to process table filter. If date filter is not provide the from value is\r\n   * set to 2018-01-01 and to value is set to 1 year from today\r\n   * @param form\r\n   */\r\n  processFilter(form) {\r\n    // @ts-ignore\r\n    const f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\r\n    // validate date\r\n    if (!this.filterForm.get('from').touched) {// if from is not populated remove from request\r\n      f.delete('from');\r\n      // this.filterForm.get('from').setValue('2018-01-01');\r\n    } else {\r\n      // f.get('from').setValue(new Date(this.filterForm.get('from').value));\r\n      const fd = new Date(this.filterForm.get('from').value);\r\n      f.set('from', fd.toISOString());\r\n    }\r\n    if (!this.filterForm.get('to').touched) {// if to is not populated remove from request\r\n      f.delete('to');\r\n      // let toDate = new Date();\r\n      // toDate.setDate(toDate.getFullYear() + 1);\r\n      // this.filterForm.get('to').setValue(this.getFormattedDate(toDate));\r\n    } else {\r\n      // f.get('to').setValue(new Date(this.filterForm.get('to').value));\r\n      const td = new Date(this.filterForm.get('to').value);\r\n      f.set('to', td.toISOString());\r\n    }\r\n\r\n    this.loadPage({offset: this.page.number, limit: this.page.size}, f);\r\n  }\r\n\r\n  /**\r\n   * Used to check if miliki control is input\r\n   * @param control\r\n   */\r\n  isInput(control: any) {\r\n    return control instanceof MlkInput;\r\n  }\r\n\r\n  /**\r\n   * Used to check if miliki control is select\r\n   * @param control\r\n   */\r\n  isSelect(control: any) {\r\n    return control instanceof MlkSelect;\r\n  }\r\n\r\n  /**\r\n   * Used to check if miliki control is textarea\r\n   */\r\n  isTextArea(control: any) {\r\n    return control instanceof MlkTextarea;\r\n  }\r\n\r\n  summaryFunc(cell: any) {\r\n    return (``);\r\n  }\r\n\r\n  /**\r\n   * Used to format date to string yyyy-MM-dd\r\n   * @param date\r\n   */\r\n  getFormattedDate(date) {\r\n    const year = date.getFullYear();\r\n\r\n    let month = (1 + date.getMonth()).toString();\r\n    month = month.length > 1 ? month : '0' + month;\r\n\r\n    let day = date.getDate().toString();\r\n    day = day.length > 1 ? day : '0' + day;\r\n\r\n    return year + '-' + month + '-' + day;\r\n  }\r\n\r\n  getFieldValue(data: Object, field: any) {\r\n    const k: Array<string> = field.split('.');\r\n    const keys = new Queue<string>(...k);\r\n    const value = this.getObjectValue(data, keys);\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Used to find key value based on the key sequence provided\r\n   * @param data expects an object\r\n   * @param keys i.e. user.gender.type.type\r\n   */\r\n  getObjectValue(data: any, keys: Queue<string>) {\r\n    if ((!(data instanceof Object)) || (keys.length === 1)) {\r\n      return data[keys.tail];\r\n    }\r\n    let value = null;\r\n    Object.keys(data).forEach((key) => {\r\n      if ((key === keys.front) && (data[key] instanceof Object)) {\r\n        value = this.getObjectValue(data[key], keys);\r\n      } else if (key === keys.tail) {\r\n        value = data[key];\r\n      }\r\n    });\r\n    return value;\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\r\n * draggable, resizable, isDateColumn, isCurrencyColumn, currencyText, summaryFunc)\r\n */\r\nexport interface MlkDataTableColumn {\r\n  /**\r\n   * column title\r\n   */\r\n  columnName: string;\r\n  /**\r\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\r\n   */\r\n  fieldName: string;\r\n  /**\r\n   * Width of the column\r\n   */\r\n  width?: number;\r\n  /**\r\n   * Enable sorting in a column\r\n   */\r\n  sortable?: boolean;\r\n  /**\r\n   * Makes a column resizable\r\n   */\r\n  canAutoResize?: boolean;\r\n  /**\r\n   * Enables a column to be draggable\r\n   */\r\n  draggable?: boolean;\r\n  /**\r\n   * Makes a column resizable\r\n   */\r\n  resizeable?: boolean;\r\n  /**\r\n   * Used to enable formating timestamp to string date\r\n   */\r\n  isDateColumn?: boolean;\r\n\r\n  /**\r\n   * Used to enable formating string to string currency\r\n   */\r\n  isCurrencyColumn?: boolean;\r\n\r\n  /**\r\n   * Used to set the currency string\r\n   */\r\n  currencyText?: string;\r\n\r\n  /**\r\n   * Function to call at the summary row\r\n   */\r\n  summaryFunc?: (any: any[]) => any;\r\n}\r\n\r\n/**\r\n * Used to display more actions column and the end of the table\r\n */\r\nexport class MlkMoreActions {\r\n  /**\r\n   * Action Column name e.g. More Actions\r\n   */\r\n  name = 'Actions';\r\n  /**\r\n   * Field name id from the server response e.g userId\r\n   */\r\n  idFieldName = 'id';\r\n  /**\r\n   * Actions e.g. Edit, Delete\r\n   */\r\n  actions: Array<MlkMoreActionData>;\r\n\r\n  constructor(actions: Array<MlkMoreActionData>, id?: string, name?: string) {\r\n    this.actions = actions;\r\n    this.name = name;\r\n    this.idFieldName = id;\r\n  }\r\n\r\n}\r\n\r\nexport interface MlkMoreActionData {\r\n  /**\r\n   * Never mind this field it will be used by the library\r\n   */\r\n  id?: any;\r\n  /**\r\n   * Action name e.g. Edit, Delete\r\n   */\r\n  actionName: any;\r\n\r\n  /**\r\n   * Action row : the clicked row\r\n   */\r\n  actionRow?: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { StewardClientComponent } from './steward-client.component';\r\nimport { MlkDatatableComponent } from './mlk-datatable/mlk-datatable.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { StewardConfig } from './steward-client.service';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgxDatatableModule,\r\n    CommonModule,\r\n    BsDatepickerModule.forRoot(),\r\n    HttpClientModule\r\n  ],\r\n  declarations: [StewardClientComponent, MlkDatatableComponent],\r\n  exports: [StewardClientComponent, MlkDatatableComponent]\r\n})\r\nexport class StewardClientModule {\r\n  static forRoot(config: StewardConfig) {\r\n    return {\r\n      ngModule: StewardClientModule,\r\n      providers: [ {provide: StewardConfig, useValue: config} ]\r\n    }\r\n  }\r\n }\r\n"],"names":[],"mappings":"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"}
