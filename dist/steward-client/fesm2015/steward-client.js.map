{"version":3,"file":"steward-client.js.map","sources":["ng://steward-client/lib/entities/wrappers/response-wrapper.ts","ng://steward-client/lib/steward-client.service.ts","ng://steward-client/lib/steward-client.component.ts","ng://steward-client/lib/entities/wrappers/page.ts","ng://steward-client/lib/entities/wrappers/mlk-dynamic-control.ts","ng://steward-client/lib/mlk-datatable/mlk-datatable.component.ts","ng://steward-client/lib/steward-client.module.ts"],"sourcesContent":["/**\n * Wraps server response\n */\nexport class ResponseWrapper<T> {\n    /**\n     * Http status code e.g. 200\n     */\n    code: number;\n    /**\n     * Server message\n     */\n    message: string;\n    /**\n     * Actual response data\n     */\n    data: T;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {Observable, of} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {ResponseWrapper} from './entities/wrappers/response-wrapper';\n\nexport class StewardConfig {\n  base_url: string;\n  access_token?: string;\n  headers?: HttpHeaders;\n}\n\n@Injectable()\nexport class StewardClientService<T, E> {\n\n  private headers: HttpHeaders;\n  token: string;\n  base_url = '/';\n\n  constructor(private http: HttpClient, private config: StewardConfig) {\n    this.base_url = config.base_url;\n    if (config.headers) {\n      // this.headers = config.headers.append('Content-Type', 'application/json; charset=utf-8');\n      this.headers = config.headers;\n    } else {\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json; charset=utf-8'\n      });\n    }\n    if (config.access_token) {// append access token if the environment has access token\n      this.headers = this.headers.append('Authorization', 'Bearer ' + config.access_token);\n    }\n  }\n\n  /**\n   * Used to handle http post requests\n   */\n  post(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n    return this.http.post(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8')}).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  /**\n   * Used to handle http post requests\n   */\n  put(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n    return this.http.put(this.base_url + endpoint, JSON.stringify(data), {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8')}).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  delete(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n    return this.http.request('delete', this.base_url + endpoint, {headers: this.headers.append('Content-Type', 'application/json; charset=utf-8'), body: JSON.stringify(data)}).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  get(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n    const options = {\n      headers: this.headers,\n      params: this.getHttpParams(data)\n    };\n    return this.http.get(this.base_url + endpoint, options).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n\n  getFile(endpoint: string, data?: Map<string, string>): Observable<ResponseWrapper<E>> {\n    const options = {\n      params: this.getHttpParams(data)\n    };\n    return this.http.get(this.base_url + endpoint + '?access_token=' + this.token, options).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  /**\n   * if\n   * @param endpoint\n   * @param data\n   * @param headers\n   */\n  postFormData(endpoint: string, data: T, headers?: HttpHeaders): Observable<ResponseWrapper<E>> {\n    const formData: FormData = new FormData();\n    Object.keys(data).forEach((key) => {\n      formData.append(key, data[key]);\n    });\n    if (this.headers.get('Authorization') && (!headers)) {\n      headers = this.headers; // new HttpHeaders({'Authorization': 'Bearer ' + this.config.access_token});\n    } else if (!headers) {\n      headers = new HttpHeaders();\n    }\n    return this.http.post(this.base_url + endpoint, formData, {headers: headers}).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  postFormDataMultipart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n    const formData: FormData = new FormData();\n    Object.keys(data).forEach((key) => {\n      if (Array.isArray(data[key])) {\n        data[key].forEach(k2 => {\n          formData.append(key, k2);\n        });\n      } else {\n        formData.append(key, data[key]);\n      }\n    });\n    return this.http.post(this.base_url + endpoint, formData, {headers: this.headers}).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  putFormDataMultiPart(endpoint: string, data: T): Observable<ResponseWrapper<E>> {\n    const formData: FormData = new FormData();\n    Object.keys(data).forEach((key) => {\n      if (Array.isArray(data[key])) {\n        data[key].forEach(k2 => {\n          formData.append(key, k2);\n        });\n      } else {\n        formData.append(key, data[key]);\n      }\n    });\n    return this.http.put(this.base_url + endpoint, formData, {headers: this.headers}).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n\n  private getHttpParams(data: Map<string, string>): HttpParams {\n    if (data === undefined) {\n      return new HttpParams();\n    }\n    let httpParams: HttpParams = new HttpParams();\n    data.forEach((value: string, key: string) => {\n      httpParams = httpParams.append(key, value);\n    });\n    return httpParams;\n  }\n\n  /**\n   * Used to catch exception thrown by http client returns internal server error\n   * if status 500 is encountered\n   */\n  private handleError<ResponseWrapper>() {\n    return (error: HttpErrorResponse): Observable<any> => {\n      const res = new ResponseWrapper();\n      //            console.error(error); // log to console instead\n      if (error.status === 500) {\n        res.code = error.status;\n        res.message = 'Sorry internal server error occured please try again later';\n      } else {\n        res.code = error.status;\n        res.message = error.error.message;\n        res.data = error.error.data;\n      }\n      return of(res);\n    };\n  }\n\n  /**\n   * Used to render action buttons\n   */\n  static renderMore(id: any) {\n    return '<div class=\\'actions-buttons center\\' id=\\'' + id + '\\'><i class=\\'fa fa-check\\' title=\\'Approve\\'></i> <i class=\\'fa fa-ban\\' title=\\'Decline\\'></i></div>';\n  }\n\n  public intiateDataTable(endpoint: string, data?: Map<string, string>) {\n    const options = {\n      headers: this.headers,\n      params: this.getHttpParams(data)\n    };\n    return this.http.get(this.base_url + endpoint, options).pipe(\n      catchError(this.handleError<any>())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'stw-steward-client',\n  template: `\n    <p>\n      steward-client works!\n    </p>\n  `,\n  styles: []\n})\nexport class StewardClientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/**\n * Datable page used to wrapper server content response\n */\nexport class Page<T> {\n    /**\n     * Number of items per page same as limit\n     */\n    size: number = 10;\n    /**\n     * Total items available on the server\n     */\n    totalElements: number = 0;\n    /**\n     * Total number of pages present\n     */\n    totalPages: number = 0;\n    /**\n     * Checks if is the first page\n     */\n    first: boolean = true;\n    /**\n     * Checks if it is the last page\n     */\n    last: boolean = false;\n    /**\n     * The actual page content\n     */\n    content: Array<T> = [];\n    /**\n     * Used to map sort parameters\n     */\n    sorted: Sort = new Sort();\n    /**\n     * Current page number\n     */\n    number: number = 0;\n}\n/**\n * used to map sort request\n */\nexport class Sort{\n    sorted: boolean = false;\n    unsorted: boolean = true;\n}\n","/**\n * Represents dynamic html controls (Input, TextArea and Select)\n */\nexport class MlkDynamicControl<T> {\n    /**\n     * Control label\n     */\n    label: string;\n    /**\n     * Icon to be appended before the control (supports class defined icons)\n     */\n    icon: string;\n    /**\n     * Name of the control (provide variable valid names ie. no spaces prefarably api corresponding names e.g. userName)\n     */\n    name: string;\n    /**\n     * The actual control (MlkInput, MlkTextArea & MlkSelect)\n     */\n    controlType: T;\n    /**\n     * Checks if the field is required\n     */\n    isRequired: boolean;\n    /**\n     * Control placeholder\n     */\n    placeholder: string = \"\";\n\n    constructor(label: string, name: string, controlType: T, icon: string = \"fa fa-file-text-o\",\n        isRequired: boolean = true, placeholder: string = null) {\n        this.label = label;\n        this.name = name;\n        this.controlType = controlType;\n        this.icon = icon;\n        this.isRequired = isRequired;\n        this.placeholder = placeholder ? placeholder : label;\n    }\n\n}\n/**\n * Used to represent html input with options:\n * type: default to text,  maxLength, minLength, min, max\n */\nexport class MlkInput{\n    /**\n     * Type of input e.g. text, number, date\n     */\n    type: string = \"text\";\n    /**\n     * Used to validate length of the input\n     */\n    maxLength: number;\n    /**\n     * Used to validate minimum input length\n     */\n    minLength: number;\n    /**\n     * Used to validate number inputs\n     */\n    min: number;\n    /**\n     * Used to validate number inputs\n     */\n    max: number;\n\n    constructor(type: string = \"text\") {\n        this.type = type;\n        this.minLength = this.min = 0;\n        this.maxLength = 4000;\n        this.max = 1000000000;\n    }\n}\n\n/**\n * Represents html textarea input\n */\nexport class MlkTextarea{\n    /**\n     * Number textarea columns\n     */\n    cols?: number;\n    /**\n     * Number of textarea rows\n     */\n    rows?: number;\n    /**\n     * Validate maximum input length\n     */\n    maxLength: number;\n    /**\n     * Validate minimum input length\n     */\n    minLength: number;\n\n    constructor(cols: number = 5, rows: number = 1){\n        this.cols = cols;\n        this.rows = rows;\n        this.maxLength = 4000;\n        this.minLength = 0\n    }\n}\n\n/**\n * Represents html select control\n */\nexport class MlkSelect {\n    /**\n     * Select options\n     */\n    options: Array<MlkSelectOption>;\n\n    constructor(options: Array<MlkSelectOption>){\n        this.options = options;\n    }\n\n}\n\nexport class MlkSelectOption{\n    /**\n     * Option value\n     */\n    value: string;\n    /**\n     * Option text/label\n     */\n    text: string;\n\n    constructor(value: string, text: string = null){\n        this.value = value;\n        this.text = text ? text : value;\n    }\n\n}\n\n","import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Page} from '../entities/wrappers/page';\nimport {MlkDynamicControl, MlkInput, MlkSelect, MlkTextarea} from '../entities/wrappers/mlk-dynamic-control';\nimport {ResponseWrapper} from '../entities/wrappers/response-wrapper';\nimport {StewardClientService} from '../steward-client.service';\nimport {DatatableComponent} from '@swimlane/ngx-datatable';\nimport {Queue} from 'queue-typescript';\n\n// const { Queue } = require('queue-typescript');\n\n@Component({\n  selector: 'stw-mlk-datatable',\n  template: `<div class=\"card card-outline-default\" *ngIf=\"enableFilterHeader\">\n  <div class=\"card-body\">\n    <form (ngSubmit)=\"processFilter(filterForm)\" [formGroup]=\"filterForm\">\n\n      <div class=\"row\">\n        <div class=\"col-md-3  mb-3\" *ngFor=\"let control of filterComponents\">\n          <label for=\"from\">{{control.label}}: </label>\n          <div class=\"input-group\">\n            <div class=\"input-group-append\">\n                <span class=\"input-group-text  form-icon-default\">\n                  <i [class]=\"control.icon\"></i>\n                </span>\n            </div>\n\n            <select *ngIf=\"isSelect(control.controlType)\" class=\"form-control form-control-sm checking-field\"\n                    [formControlName]=\"control.name\">\n              <option value=\"\" disabled selected>{{control.placeholder}}</option>\n              <option *ngFor=\"let o of control.controlType.options\">{{o.text}}</option>\n            </select>\n\n            <textarea *ngIf=\"isTextArea(control.controlType)\" [cols]=\"control.controlType.cols\"\n                      [rows]=\"control.controlType.rows\" class=\"form-control form-control-sm checking-field\"\n                      [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\n\n            <input *ngIf=\"isInput(control.controlType)\" [type]=\"control.controlType.type\"\n                   [placeholder]=\"control.placeholder\" class=\"form-control form-control-sm checking-field\"\n                   [formControlName]=\"control.name\"/>\n          </div>\n          <span class=\"help-block\" *ngIf=\"filterForm.get(control.name).touched\">\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('required')\">{{control.placeholder}} is required</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('minlength')\">Minimum of {{control.controlType.minLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('maxlength')\">Maximum of {{control.controlType.maxLength}} characters</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('min')\">Should be greater than {{control.controlType.min}}</span>\n              <span class=\"text-danger\" *ngIf=\"filterForm.get(control.name).hasError('max')\">Should be less than {{control.controlType.max}}</span>\n            </span>\n        </div>\n      </div>\n\n      <div class=\"row\" *ngIf=\"enableDefaultTableHeader\">\n        <div class=\"col-md-3 mb-3\">\n          <label for=\"from\">From: </label>\n          <div class=\"input-group\">\n            <div class=\"input-group-append\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n            </div>\n            <input\n              type=\"text\"\n              class=\"form-control form-control-sm checking-field\"\n              id=\"inputTravelDate\"\n              formControlName=\"from\"\n              placeholder=\"From...\"\n              #dpfrom=\"bsDatepicker\"\n              bsDatepicker\n              [outsideClick]=\"false\"\n              [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\n              maxlength=\"30\"\n              required\n              readonly\n            />\n            <div class=\"input-group-append\">\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpfrom.toggle()\"\n                      [attr.aria-expanded]=\"dpfrom.isOpen\"><i class=\"fa fa-th\"></i></button>\n            </div>\n          </div>\n          <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n                <span class=\"text-danger\"\n                      *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 30 characters</span>\n            </span>\n        </div>\n        <div class=\"col-md-3 mb-3\">\n          <label for=\"from\">To: </label>\n          <div class=\"input-group\">\n            <div class=\"input-group-append\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-calendar-o\"></i>\n                </span>\n            </div>\n            <input\n              type=\"text\"\n              class=\"form-control form-control-sm checking-field\"\n              id=\"inputTravelDate\"\n              formControlName=\"to\"\n              placeholder=\"To...\"\n              #dpto=\"bsDatepicker\"\n              bsDatepicker\n              [outsideClick]=\"false\"\n              [bsConfig]=\"{ dateInputFormat: 'DD-MM-YYYY', containerClass: 'theme-red' }\"\n              maxlength=\"30\"\n              required\n              readonly\n            />\n            <div class=\"input-group-append\">\n              <button class=\"btn btn-primary\" type=\"button\" (click)=\"dpto.toggle()\" [attr.aria-expanded]=\"dpto.isOpen\">\n                <i class=\"fa fa-th\"></i></button>\n            </div>\n          </div>\n          <span class=\"help-block\" *ngIf=\"filterForm.get('to').touched\">\n                <span class=\"text-danger\"\n                      *ngIf=\"filterForm.get('to').hasError('maxlength')\">Maximum of 30 characters</span>\n            </span>\n        </div>\n        <div class=\"col-md-3 mb-3\">\n          <label for=\"search\">Search:</label>\n          <div class=\"input-group\">\n            <div class=\"input-group-prepend\">\n                <span class=\"input-group-text form-icon-default\">\n                  <i class=\"fa fa-search\"></i>\n                </span>\n            </div>\n            <input formControlName=\"needle\" class=\"form-control form-control-sm checking-field\" type=\"text\"\n                   placeholder=\"Search...\" (keyup)=\"updateFilter($event)\"/>\n          </div>\n        </div>\n        <span class=\"help-block\" *ngIf=\"filterForm.get('from').touched\">\n              <span class=\"text-danger\"\n                    *ngIf=\"filterForm.get('from').hasError('maxlength')\">Maximum of 200 characters</span>\n          </span>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"pull-right inline-buttons\">\n            <button class=\"btn btn-warning btn-sm\" type=\"reset\">\n              <i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>\n              Reset\n            </button>\n            <button class=\"btn btn-success btn-sm pull-right\" type=\"submit\">\n              <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\n              Filter\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</div>\n\n<ngx-datatable\n  #table\n  [rowHeight]=\"tableRowHeight\"\n  [footerHeight]=\"tableFooterHeight\"\n  [headerHeight]=\"tableHeaderHeight\"\n  [scrollbarV]=\"verticalScrollActive\"\n  [scrollbarH]=\"horizontalScrollActive\"\n  [summaryRow]=\"enableSummary\"\n  [summaryPosition]=\"summaryPosition\"\n  [summaryHeight]=\"summaryHeight\"\n  class=\"bootstrap\"\n  [columnMode]=\"'force'\"\n  [rows]=\"page.content\"\n  [selected]=\"selected\"\n  [selectionType]=\"'checkbox'\"\n  (activate)=\"onActivate($event)\"\n  (select)='onSelect($event)'\n  [count]=\"page.totalElements\"\n  [offset]=\"page.number\"\n  [externalPaging]=\"true\"\n  [limit]=\"page.size\"\n  (page)=\"loadPage($event, null)\">\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [width]=\"30\" [sortable]=\"false\" [canAutoResize]=\"false\"\n                        [draggable]=\"true\" [resizeable]=\"false\" [headerCheckboxable]=\"true\"\n                        [checkboxable]=\"true\" *ngIf=\"enableCheckbox\">\n  </ngx-datatable-column>\n  <ngx-datatable-column [summaryFunc]=\"(c.summaryFunc) ? c.summaryFunc : summaryFunc\"\n                        [canAutoResize]=\"(c.canAutoResize) ? c.canAutoResize : true\" [name]=\"c.columnName\"\n                        [width]=\"c.width\"\n                        [sortable]=\"(c.sortable) ? c.sortable : true\" [draggable]=\"(c.draggable) ? c.draggable : true\"\n                        [resizeable]=\"(c.resizeable) ? c.resizeable : true\"\n                        *ngFor=\"let c of columns; index as i;\">\n    <ng-template let-column=\"column\" ngx-datatable-header-template *ngIf=\"i==0\">\n      <strong>#</strong>\n    </ng-template>\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-row=\"row\" *ngIf=\"i==0\">\n        <span>\n            {{rowIndex+1}}\n        </span>\n    </ng-template>\n\n    <ng-template let-column=\"column\" ngx-datatable-header-template>\n      <strong>{{c.columnName}}</strong>\n    </ng-template>\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n            <ng-container *ngIf=\"c.isDateColumn; then t10\"></ng-container>\n            <ng-container *ngIf=\"c.isCurrencyColumn && c.currencyText; then t40\"></ng-container>\n            <ng-container *ngIf=\"c.isCurrencyColumn && !c.currencyText; then t70\"></ng-container>\n            <ng-container *ngIf=\"!c.isDateColumn && !c.isCurrencyColumn; then t70\"></ng-container>\n\n            <ng-template #t10>\n                {{(getFieldValue(row, c.fieldName) | date:'medium')}}\n            </ng-template>\n            <ng-template #t40>\n                {{(getFieldValue(row, c.fieldName) | currency:c.currencyText:'code')}}\n            </ng-template>\n            <ng-template #t70>\n                {{getFieldValue(row, c.fieldName)}}\n            </ng-template>\n        </span>\n    </ng-template>\n  </ngx-datatable-column>\n  <ngx-datatable-column [summaryFunc]=\"summaryFunc\" [name]=\"moreActions.name\" *ngIf=\"moreActions\" [sortable]=\"false\"\n                        [canAutoResize]=\"false\">\n    <ng-template ngx-datatable-cell-template let-rowIndex=\"rowIndex\" let-value=\"value\" let-row=\"row\">\n        <span>\n          <div class=\"input-group-prepend\">\n            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\">\n              <i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>\n            </button>\n            <div class=\"dropdown-menu\">\n              <a class=\"dropdown-item\" *ngFor=\"let action of moreActions.actions\" href=\"javascript:;\"\n                 (click)=\"onActionClick({id: row[moreActions.idFieldName], actionName: action.actionName, actionRow: row})\">{{action.actionName}}</a>\n            </div>\n          </div>\n        </span>\n    </ng-template>\n  </ngx-datatable-column>\n</ngx-datatable>\n`,\n  styles: [``]\n})\nexport class MlkDatatableComponent implements OnInit {\n  @Input() tableRowHeight = 50;\n  @Input() tableFooterHeight = 50;\n  @Input() tableHeaderHeight = 50;\n  @Input() verticalScrollActive = false;\n  @Input() horizontalScrollActive = false;\n  @Input() columns: Array<MlkDataTableColumn> = [];\n  @Input() enableCheckbox = false;\n  @Input() endpoint: string;\n  @Input() enableFilterHeader = false;\n  @Input() enableDefaultTableHeader = false;\n  @Input() enableSummary = false;\n  @Input() summaryPosition = '\\'bottom\\'';\n  @Input() summaryHeight = '\\'auto\\'';\n  @Input() moreActions: MlkMoreActions;\n  @Output() onActionsEvent = new EventEmitter<MlkMoreActionData>();\n  @Input() filterComponents: Array<MlkDynamicControl<any>> = [];\n  @Input() params: Map<string, any>;\n  page: Page<any> = new Page();\n  selected = [];\n  @Output() onSelected = new EventEmitter<Array<any>>();\n  @ViewChild(DatatableComponent) table: DatatableComponent;\n  filter: Object = {};\n  filterForm: FormGroup;\n  emptySummaryFunc: () => null;\n\n\n  constructor(private sterwardService: StewardClientService<ResponseWrapper<Page<any>>, any>) {\n  }\n\n  /**\n   * Generate form control from filterComponents and also appending default controls ie. date filter and search controls\n   */\n  ngOnInit() {\n    const group = {};\n    this.filterComponents.forEach(comp => {\n      const validators: Array<any> = [];\n      if (comp.isRequired) {\n        validators.push(Validators.required);\n      }\n\n      if (comp.controlType instanceof MlkInput || comp.controlType instanceof MlkTextarea) {\n        validators.push(Validators.minLength(comp.controlType.minLength));\n        validators.push(Validators.maxLength(comp.controlType.maxLength));\n      }\n\n      if (comp.controlType instanceof MlkInput) {\n        validators.push(Validators.max(comp.controlType.max));\n        validators.push(Validators.min(comp.controlType.min));\n      }\n      group[comp.name] = new FormControl('', validators);\n    });\n    // add default controls\n    group['from'] = new FormControl('', Validators.maxLength(30));\n    group['to'] = new FormControl('', Validators.maxLength(30));\n    group['needle'] = new FormControl('', Validators.maxLength(200));\n    this.filterForm = new FormGroup(group);\n    this.loadPage({offset: 0, limit: this.page.size}, null);\n  }\n\n  /**\n   * Used to emit click event of the actions\n   * @param event\n   */\n  onActionClick(event: MlkMoreActionData) {\n    this.onActionsEvent.emit(event);\n  }\n\n  /**\n   * Process server request of datable\n   * @param pageInfo\n   * @param filters\n   */\n  loadPage(pageInfo, filters) {\n    if (!this.endpoint) {\n      return;\n    }\n    let request: Map<string, any>;\n    if (filters) {\n      request = filters;\n    } else {\n      request = new Map();\n    }\n    if (this.params) {\n      this.params.forEach((value, key) => {\n        request.set(key, value);\n      });\n    }\n    request.set('page', pageInfo.offset);\n    request.set('size', pageInfo.limit);\n    this.sterwardService.get(this.endpoint, request).subscribe(response => {\n      if (response.code === 200) {\n        this.page = response.data;\n      }\n    });\n\n  }\n\n  /**\n   * Used to handle select option\n   * @param event\n   */\n  onSelect({selected}) {\n    console.log('Select Event', selected, this.selected);\n\n    this.selected.splice(0, this.selected.length);\n    this.selected.push(...selected);\n    this.onSelected.emit(this.selected);\n  }\n\n  onActivate(event) {\n\n  }\n\n  updateFilter(event) {\n\n  }\n\n  /**\n   * Used to process table filter. If date filter is not provide the from value is\n   * set to 2018-01-01 and to value is set to 1 year from today\n   * @param form\n   */\n  processFilter(form) {\n    // @ts-ignore\n    const f: Map<String, any> = new Map(Object.entries(this.filterForm.value));\n    // validate date\n    if (!this.filterForm.get('from').touched) {// if from is not populated remove from request\n      f.delete('from');\n      // this.filterForm.get('from').setValue('2018-01-01');\n    } else {\n      // f.get('from').setValue(new Date(this.filterForm.get('from').value));\n      const fd = new Date(this.filterForm.get('from').value);\n      f.set('from', fd.toISOString());\n    }\n    if (!this.filterForm.get('to').touched) {// if to is not populated remove from request\n      f.delete('to');\n      // let toDate = new Date();\n      // toDate.setDate(toDate.getFullYear() + 1);\n      // this.filterForm.get('to').setValue(this.getFormattedDate(toDate));\n    } else {\n      // f.get('to').setValue(new Date(this.filterForm.get('to').value));\n      const td = new Date(this.filterForm.get('to').value);\n      f.set('to', td.toISOString());\n    }\n\n    this.loadPage({offset: this.page.number, limit: this.page.size}, f);\n  }\n\n  /**\n   * Used to check if miliki control is input\n   * @param control\n   */\n  isInput(control: any) {\n    return control instanceof MlkInput;\n  }\n\n  /**\n   * Used to check if miliki control is select\n   * @param control\n   */\n  isSelect(control: any) {\n    return control instanceof MlkSelect;\n  }\n\n  /**\n   * Used to check if miliki control is textarea\n   */\n  isTextArea(control: any) {\n    return control instanceof MlkTextarea;\n  }\n\n  summaryFunc(cell: any) {\n    return (``);\n  }\n\n  /**\n   * Used to format date to string yyyy-MM-dd\n   * @param date\n   */\n  getFormattedDate(date) {\n    const year = date.getFullYear();\n\n    let month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    let day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return year + '-' + month + '-' + day;\n  }\n\n  getFieldValue(data: Object, field: any) {\n    const k: Array<string> = field.split('.');\n    const keys = new Queue<string>(...k);\n    const value = this.getObjectValue(data, keys);\n    return value;\n  }\n\n  /**\n   * Used to find key value based on the key sequence provided\n   * @param data expects an object\n   * @param keys i.e. user.gender.type.type\n   */\n  getObjectValue(data: any, keys: Queue<string>) {\n    if ((!(data instanceof Object)) || (keys.length === 1)) {\n      return data[keys.tail];\n    }\n    let value = null;\n    Object.keys(data).forEach((key) => {\n      if ((key === keys.front) && (data[key] instanceof Object)) {\n        value = this.getObjectValue(data[key], keys);\n      } else if (key === keys.tail) {\n        value = data[key];\n      }\n    });\n    return value;\n\n  }\n\n}\n\n/**\n * Used to define datatable columns with attributes (columnName, fieldName, width, sortable, canAutoResize,\n * draggable, resizable, isDateColumn, isCurrencyColumn, currencyText, summaryFunc)\n */\nexport interface MlkDataTableColumn {\n  /**\n   * column title\n   */\n  columnName: string;\n  /**\n   * Server side response field corresponding to the column i.e fullName may correspond to Name column\n   */\n  fieldName: string;\n  /**\n   * Width of the column\n   */\n  width?: number;\n  /**\n   * Enable sorting in a column\n   */\n  sortable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  canAutoResize?: boolean;\n  /**\n   * Enables a column to be draggable\n   */\n  draggable?: boolean;\n  /**\n   * Makes a column resizable\n   */\n  resizeable?: boolean;\n  /**\n   * Used to enable formating timestamp to string date\n   */\n  isDateColumn?: boolean;\n\n  /**\n   * Used to enable formating string to string currency\n   */\n  isCurrencyColumn?: boolean;\n\n  /**\n   * Used to set the currency string\n   */\n  currencyText?: string;\n\n  /**\n   * Function to call at the summary row\n   */\n  summaryFunc?: (any: any[]) => any;\n}\n\n/**\n * Used to display more actions column and the end of the table\n */\nexport class MlkMoreActions {\n  /**\n   * Action Column name e.g. More Actions\n   */\n  name = 'Actions';\n  /**\n   * Field name id from the server response e.g userId\n   */\n  idFieldName = 'id';\n  /**\n   * Actions e.g. Edit, Delete\n   */\n  actions: Array<MlkMoreActionData>;\n\n  constructor(actions: Array<MlkMoreActionData>, id?: string, name?: string) {\n    this.actions = actions;\n    this.name = name;\n    this.idFieldName = id;\n  }\n\n}\n\nexport interface MlkMoreActionData {\n  /**\n   * Never mind this field it will be used by the library\n   */\n  id?: any;\n  /**\n   * Action name e.g. Edit, Delete\n   */\n  actionName: any;\n\n  /**\n   * Action row : the clicked row\n   */\n  actionRow?: any;\n}\n","import { NgModule } from '@angular/core';\nimport { StewardClientComponent } from './steward-client.component';\nimport { MlkDatatableComponent } from './mlk-datatable/mlk-datatable.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StewardConfig } from './steward-client.service';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    NgxDatatableModule,\n    CommonModule,\n    BsDatepickerModule.forRoot(),\n    HttpClientModule\n  ],\n  declarations: [StewardClientComponent, MlkDatatableComponent],\n  exports: [StewardClientComponent, MlkDatatableComponent]\n})\nexport class StewardClientModule {\n  static forRoot(config: StewardConfig) {\n    return {\n      ngModule: StewardClientModule,\n      providers: [ {provide: StewardConfig, useValue: config} ]\n    }\n  }\n }\n"],"names":[],"mappings":"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"}
